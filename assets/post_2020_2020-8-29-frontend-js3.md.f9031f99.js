import{o as e,c as t,t as l,a,x as i}from"./app.746f22cf.js";const r='{"title":"前端面试题汇总-js-3","description":"","frontmatter":{"title":"前端面试题汇总-js-3","tag":["javaScript"],"cover":"https://gitee.com/artiely/Figure-bed/raw/master/image/20200829105349.png","base64":141414,"author":"artiely","date":"2020-8-29"},"headers":[{"level":2,"title":"XSS","slug":"xss"},{"level":3,"title":"XSS是什么","slug":"xss是什么"},{"level":3,"title":"特点","slug":"特点"},{"level":3,"title":"原因","slug":"原因"},{"level":3,"title":"危害","slug":"危害"},{"level":3,"title":"如何防范","slug":"如何防范"},{"level":2,"title":"CSRF","slug":"csrf"},{"level":3,"title":"特点","slug":"特点-1"},{"level":3,"title":"防御","slug":"防御"},{"level":2,"title":"同源策略","slug":"同源策略"},{"level":2,"title":"跨域","slug":"跨域"},{"level":2,"title":"JSONP","slug":"jsonp"},{"level":2,"title":"域名收敛","slug":"域名收敛"}],"relativePath":"post/2020/2020-8-29-frontend-js3.md","lastUpdated":1629110863943}',o={},n=l('<h1 id="前端面试题汇总-js-3"><a class="header-anchor" href="#前端面试题汇总-js-3" aria-hidden="true">#</a> 前端面试题汇总-js-3</h1><h2 id="xss"><a class="header-anchor" href="#xss" aria-hidden="true">#</a> XSS</h2><h3 id="xss是什么"><a class="header-anchor" href="#xss是什么" aria-hidden="true">#</a> XSS是什么</h3><p>XSS是一种经常出现在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中。</p><p>比如这些代码包括HTML代码和客户端脚本。攻击者利用XSS漏洞旁路掉访问控制——例如同源策略(same origin policy)。</p><p>这种类型的漏洞由于被黑客用来编写危害性更大的网络钓鱼(Phishing)攻击而变得广为人知。<br><br> 对于跨站脚本攻击，黑客界共识是：跨站脚本攻击是新型的“缓冲区溢出攻击“，而JavaScript是新型的“ShellCode”。</p>',6),c=a("div",{class:"language-js line-numbers-mode"},[a("pre",null,[a("code",null,[a("span",{class:"token comment"},"// 示例："),i("\n"),a("span",{class:"token comment"},"// <script>alert(document.cookie)<\/script>"),i("\n")]),a("div",{class:"m-mdic-copy-wrapper"},[a("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558017418-8270"},"复制成功"),a("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"// 示例：\n// <script>alert(document.cookie)<\/script>\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558017418-8270","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),a("div",{class:"line-numbers-wrapper"},[a("span",{class:"line-number"},"1"),a("br"),a("span",{class:"line-number"},"2"),a("br")])],-1),s=l('<h3 id="特点"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h3><p>能注入恶意的HTML/JavaScript代码到用户浏览的网页上，从而达到Cookie资料窃取、会话劫持、钓鱼欺骗等攻击。<br><code>&lt;攻击代码不一定（非要）在 &lt;script&gt;&lt;/script&gt; 中&gt;</code></p><h3 id="原因"><a class="header-anchor" href="#原因" aria-hidden="true">#</a> 原因</h3><ul><li><p>Web浏览器本身的设计不安全。浏览器能解析和执行JS等代码，但是不会判断该数据和程序代码是否恶意。</p></li><li><p>输入和输出是Web应用程序最基本的交互，而且网站的交互功能越来越丰富。如果在这过程中没有做好安全防护，很容易会出现XSS漏洞。</p></li><li><p>程序员水平参差不齐，而且大都没有过正规的安全培训，没有相关的安全意识。</p></li><li><p>XSS攻击手段灵活多变。</p></li></ul><h3 id="危害"><a class="header-anchor" href="#危害" aria-hidden="true">#</a> 危害</h3><ul><li>盗取各类用户帐号，如机器登录帐号、用户网银帐号、各类管理员帐号</li><li>控制企业数据，包括读取、篡改、添加、删除企业敏感数据的能力</li><li>盗窃企业重要的具有商业价值的资料</li><li>非法转账</li><li>强制发送电子邮件</li><li>网站挂马</li><li>控制受害者机器向其它网站发起攻击</li></ul><h3 id="如何防范"><a class="header-anchor" href="#如何防范" aria-hidden="true">#</a> 如何防范</h3><ul><li>将重要的cookie标记为http only, 这样的话Javascript 中的document.cookie语句就不能获取到cookie了.</li><li>表单数据规定值的类型，例如：年龄应为只能为int、name只能为字母数字组合。。。。</li><li>对数据进行Html Encode 处理</li><li>过滤或移除特殊的Html标签， 例如: <code>&lt;script&gt;</code>, <code>&lt;iframe&gt;</code> , <code>&amp;lt; for &lt;</code>, <code>&amp;gt; for &gt;</code>, <code>&amp;quot for</code></li><li>过滤JavaScript 事件的标签。例如 &quot;onclick=&quot;, &quot;onfocus&quot; 等等。</li></ul><p>参考资料：<br><br><a href="https://www.cnblogs.com/phpstudy2015-6/p/6767032.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/phpstudy2015-6/p/6767032.html</a><br><br><a href="https://www.cnblogs.com/443855539-wind/p/6055816.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/443855539-wind/p/6055816.html</a><br><br><a href="https://baike.baidu.com/item/XSS%E6%94%BB%E5%87%BB/954065?fr=aladdin" target="_blank" rel="noopener noreferrer">https://baike.baidu.com/item/XSS攻击/954065?fr=aladdin</a></p><h2 id="csrf"><a class="header-anchor" href="#csrf" aria-hidden="true">#</a> CSRF</h2><p>CSRF（Cross-site request forgery）跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与XSS非常不同，XSS利用站点内的信任用户，而CSRF则通过伪装来自受信任用户的请求来利用受信任的网站。与XSS攻击相比，CSRF攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比XSS更具危险性。</p><h3 id="特点-1"><a class="header-anchor" href="#特点-1" aria-hidden="true">#</a> 特点</h3><ul><li>依靠用户标识危害网站</li><li>利用网站对用户标识的信任</li><li>欺骗用户的浏览器发送HTTP请求给目标站点</li><li>另外可以通过IMG标签会触发一个GET请求，可以利用它来实现CSRF攻击。</li></ul><h3 id="防御"><a class="header-anchor" href="#防御" aria-hidden="true">#</a> 防御</h3><ul><li>通过referer、token或者验证码来检测用户提交。</li><li>尽量不要在页面的链接中暴露用户隐私信息。</li><li>对于用户修改删除等操作最好都使用post操作 。</li><li>避免全站通用的cookie，严格设置cookie的域。</li></ul><h2 id="同源策略"><a class="header-anchor" href="#同源策略" aria-hidden="true">#</a> 同源策略</h2><p>同源策略可防止 JavaScript 发起跨域请求。源被定义为 URI、主机名和端口号的组合。此策略可防止页面上的恶意脚本通过该页面的文档对象模型，访问另一个网页上的敏感数据。</p><h2 id="跨域"><a class="header-anchor" href="#跨域" aria-hidden="true">#</a> 跨域</h2><ul><li>原因 <br><br> 浏览器的同源策略导致了跨域</li><li>作用 <br><br> 用于隔离潜在恶意文件的重要安全机制</li><li>解决</li></ul><ol><li>jsonp ，允许 script 加载第三方资源</li><li>反向代理（nginx 服务内部配置 Access-Control-Allow-Origin *）</li><li>cors 前后端协作设置请求头部，Access-Control-Allow-Origin 等头部信息</li><li>iframe 嵌套通讯，postmessage</li></ol><p><a href="https://zhuanlan.zhihu.com/p/41479807" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/41479807</a> <br><br><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener noreferrer">跨域资源共享 CORS 阮一峰</a></p><h2 id="jsonp"><a class="header-anchor" href="#jsonp" aria-hidden="true">#</a> JSONP</h2><p>这是我认为写得比较通俗易懂的一篇文章 直接转载过来<br><br><a href="https://blog.csdn.net/hansexploration/article/details/80314948" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/hansexploration/article/details/80314948</a></p><h2 id="域名收敛"><a class="header-anchor" href="#域名收敛" aria-hidden="true">#</a> 域名收敛</h2><p>PC 时代为了突破浏览器的域名并发限制。有了域名发散。<br><br> 浏览器有并发限制，是为了防止DDOS攻击。<br><br> 域名收敛：就是将静态资源放在一个域名下。减少DNS解析的开销。<br><br> 域名发散：是将静态资源放在多个子域名下，就可以多线程下载，提高并行度，使客户端加载静态资源更加迅速。<br><br> 域名发散是pc端为了利用浏览器的多线程并行下载能力。而域名收敛多用与移动端，提高性能，因为dns解析是是从后向前迭代解析，如果域名过多性能会下降，增加DNS的解析开销。</p>',25);o.render=function(l,a,i,r,o,d){return e(),t("div",null,[n,c,s])};export default o;export{r as __pageData};
