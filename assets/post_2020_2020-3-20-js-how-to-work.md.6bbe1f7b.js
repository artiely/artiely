import{o as n,c as t,t as a,a as s,x as c}from"./app.746f22cf.js";const e='{"title":"JavaScript 复习系列 之 JavaScript是如何工作的","description":"","frontmatter":{"title":"JavaScript 复习系列 之 JavaScript是如何工作的","tag":["javaScript"],"author":"Artiley","cover":"https://gitee.com/artiely/Figure-bed/raw/master/images/20200320131821.png","date":"2020-3-20","hot":true,"base64":"f0db4f"},"headers":[{"level":2,"title":"JavaScript 是如何工作的？","slug":"javascript-是如何工作的"},{"level":2,"title":"功能执行上下文","slug":"功能执行上下文"},{"level":2,"title":"全局执行上下文","slug":"全局执行上下文"},{"level":2,"title":"执行栈","slug":"执行栈"},{"level":2,"title":"事件队列","slug":"事件队列"},{"level":2,"title":"函数执行上下文步骤","slug":"函数执行上下文步骤"},{"level":2,"title":"作用域与作用域链","slug":"作用域与作用域链"},{"level":2,"title":"闭包","slug":"闭包"},{"level":2,"title":"this","slug":"this"},{"level":3,"title":"箭头函数","slug":"箭头函数"},{"level":3,"title":"函数声明","slug":"函数声明"},{"level":3,"title":"简单调用","slug":"简单调用"},{"level":3,"title":"对象方法调用","slug":"对象方法调用"},{"level":3,"title":"构造函数调用","slug":"构造函数调用"},{"level":3,"title":"DOM事件处理程序调用","slug":"dom事件处理程序调用"},{"level":3,"title":"使用自定义值调用this","slug":"使用自定义值调用this"},{"level":2,"title":"注意箭头函数","slug":"注意箭头函数"},{"level":2,"title":"声明提升","slug":"声明提升"},{"level":2,"title":"结论","slug":"结论"}],"relativePath":"post/2020/2020-3-20-js-how-to-work.md","lastUpdated":1629110849695}',o={},i=a('<h1 id="javascript-复习系列-之-javascript是如何工作的"><a class="header-anchor" href="#javascript-复习系列-之-javascript是如何工作的" aria-hidden="true">#</a> JavaScript 复习系列 之 JavaScript是如何工作的</h1><p>2020年注定是个特殊的年份，随着新年的到来，新型冠状病毒也加快了蔓延的脚步。时至今日我们依然在家闭关。既然是闭关，那我也得修炼点什么啊。<br> 他来了！JavaScript！[或简写js] 其实本来想做出个什么高大上的产品出来的，计划是做一个桌面应用程序，大致包含博客的书写和自动发布，后面越想越不着边际不知从何下手。于是 决定重温一遍JavaScript。有夯实的基础就不怕铸造琼楼玉宇。</p><p>在学习JavaScript的过程中晦涩难懂的概念似乎很多，一些名词听起来就让人望而却步。其实不然的，只要你了解了基础原理你就可以进阶更高级的主题。<br> 了解JavaScript的工作方式能让你阅读和编写代码更容易和省力。并且使您可以专注于应用程序的逻辑，而不必与语言的语法作斗争。</p><h2 id="javascript-是如何工作的"><a class="header-anchor" href="#javascript-是如何工作的" aria-hidden="true">#</a> JavaScript 是如何工作的？</h2><p>计算机不了解JavaScript，而浏览器则了解。<br> 除了处理网络请求，监听鼠标单击以及解析HTML和CSS以在屏幕上绘制像素外，该浏览器还内置了JavaScript引擎。<br> JavaScript引擎是用C ++编写的程序，它逐字符地遍历所有JavaScript代码，并将其“转换”为计算机CPU可以理解和执行的东西- 机器代码。</p><blockquote><p>机器代码:计算机直接使用的程序语言，其语句就是机器指令码，机器指令码是用于指挥计算机应做的操作和操作数地址的一组二进制数。<br> 这是同步发生的，意味着一次一行且有序。</p></blockquote><p>之所以这样做，是因为机器代码人为编码很困难，并且因为各个CPU制造商的机器代码指令不同。</p><p>因此，他们将所有这些麻烦从JavaScript开发人员那里抽象出来，否则，Web开发将变得更加困难，普及程度降低，而且我们将不会遇到如此琳琅满目的网页。</p><p>JavaScript引擎可以一遍又一遍地遍历JavaScript的每一行（请参阅解释器），或者可以变得更聪明并检测诸如经常调用的函数之类的事物，并始终产生相同的结果。</p><blockquote><p>解释器（英语：Interpreter），又译为直译器，是一种电脑程序，能够把高级编程语言一行一行直接转译运行。解释器不会一次把整个程序转译出来，只像一位“中间人”，每次运行程序时都要先转成另一种语言再作运行，因此解释器的程序运行速度比较缓慢。它每转译一行程序叙述就立刻运行，然后再转译下一行，再运行，如此不停地进行下去。</p></blockquote><p>然后，它可以一次将它们编译为机器代码，以便下次遇到该代码时，它将运行已编译的代码，这要快得多（请参阅即时编译）。</p><blockquote><p>即时编译器（JIT compiler）随虚拟机一起供给的，并可选使用。它把字节码编译成可立即执行的指定平台的可执行代码。</p></blockquote><p>或者，它可以将整个事情预先编译为机器代码并执行（参见Compiler）。</p><blockquote><p>简单讲，编译器就是将“一种语言（通常为高级语言）”翻译为“另一种语言（通常为低级语言）”的程序。</p></blockquote><p>V8是这样的JavaScript引擎，于2008年Google开源。2009年，一个叫Ryan Dahl的人想到了使用V8创建Node.js的想法，Node.js是浏览器外部JavaScript的运行时环境，这意味着该语言可以也可用于服务器端应用程序。</p><h2 id="功能执行上下文"><a class="header-anchor" href="#功能执行上下文" aria-hidden="true">#</a> 功能执行上下文</h2><p>与任何其他语言一样，JavaScript对于函数，变量，数据类型以及这些数据类型可以存储的确切值，在代码中可访问的位置以及在代码中不可访问的位置等都有自己的规则。</p><p>这些规则由名为Ecma International的标准组织定义，并一起构成语言规范文档（您可以在<a href="https://www.ecma-international.org/publications/standards/Ecma-262.htm" target="_blank" rel="noopener noreferrer">此处</a>找到最新版本）。</p><p>因此，当引擎将JavaScript代码转换为机器代码时，它需要考虑规格。</p><p>如果代码包含非法分配或试图访问变量（根据语言规范，该变量不能从代码的特定部分访问），该怎么办？</p><p>每次调用一个函数时，都需要弄清楚所有这些事情。它通过创建一个称为执行上下文的包装器来实现此目的。</p><p>为了更具体，避免将来出现混乱，我将这个函数执行上下文称为，因为每次调用一个函数时都会创建一个。不要被这个术语吓到，也不要现在考虑太多，稍后将详细介绍。</p><p>只需记住它决定了事情，例如：“在该特定函数中可以访问哪些变量this，其中的值是什么，其中声明了哪些变量和函数？”</p><h2 id="全局执行上下文"><a class="header-anchor" href="#全局执行上下文" aria-hidden="true">#</a> 全局执行上下文</h2><p>但是，并非所有JavaScript代码都位于函数内部（即使大多数都包含在其中）。</p><p>在全局级别，任何函数之外也可能存在代码，因此JavaScript引擎要做的第一件事就是创建全局执行上下文。</p><p>这就像一个函数执行上下文，并且在全局级别上具有相同的目的，但是它具有一些特殊性。</p><p>例如，只有一个全局执行上下文是在执行开始时创建的，所有JavaScript代码都在其中运行。</p><p>即使没有代码要执行，全局执行上下文也会创建两个特定于它的东西：</p><p>全局对象。此对象是window,JavaScript在浏览器中运行时的对象。当它在Node.js之外运行时，就像一样global。为了简单起见，我将在本文中使用window。</p><p>一个特殊的变量称为<code>this</code>。</p><p>在全局执行上下文中，并且仅在那里，<code>this</code>实际上等于全局对象<code>window</code>。基本上是对<code>window</code>的引用。</p>',32),l=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"this"),c(),s("span",{class:"token operator"},"==="),c(" window "),s("span",{class:"token comment"},"// logs true"),c("\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558012527-893"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"this === window // logs true\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558012527-893","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br")])],-1),p=s("p",null,[c("全局执行上下文和函数执行上下文之间的另一个细微差别是，在全局级别（任何函数之外）声明的任何变量或函数都将作为属性自动附加到"),s("code",null,"window"),c("对象，并隐式附加到特殊变量"),s("code",null,"this"),c("。")],-1),d=s("p",null,[c("即使函数也具有特殊变量"),s("code",null,"this"),c("，在函数执行上下文中也不会发生这种情况。")],-1),u=s("p",null,"因此，如果我们foo在全局级别声明了一个全局变量，则以下三个语句实际上都指向该变量。同样适用于函数。",-1),r=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[c("foo"),s("span",{class:"token punctuation"},";"),c(),s("span",{class:"token comment"},"// 'bar'"),c("\nwindow"),s("span",{class:"token punctuation"},"."),c("foo"),s("span",{class:"token punctuation"},";"),c(),s("span",{class:"token comment"},"// 'bar'"),c("\n"),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},"."),c("foo"),s("span",{class:"token punctuation"},";"),c(),s("span",{class:"token comment"},"// 'bar'"),c("\n"),s("span",{class:"token punctuation"},"("),c("window"),s("span",{class:"token punctuation"},"."),c("foo "),s("span",{class:"token operator"},"==="),c(" foo "),s("span",{class:"token operator"},"&&"),c(),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},"."),c("foo "),s("span",{class:"token operator"},"==="),c(" foo "),s("span",{class:"token operator"},"&&"),c(" window"),s("span",{class:"token punctuation"},"."),c("foo "),s("span",{class:"token operator"},"==="),c(),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},"."),c("foo"),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token comment"},"// true"),c("\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558012527-61424"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"foo; // 'bar'\nwindow.foo; // 'bar'\nthis.foo; // 'bar'\n(window.foo === foo && this.foo === foo && window.foo === this.foo) // true\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558012527-61424","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br")])],-1),m=a('<p>所有的JavaScript内置的变量和函数连接到全局window对象：<code>setTimeout()</code>，<code>localStorage</code>，<code>scrollTo()</code>，<code>Math</code>，<code>fetch()</code>，等等。这就是为什么他们是在代码访问的任何地方。</p><h2 id="执行栈"><a class="header-anchor" href="#执行栈" aria-hidden="true">#</a> 执行栈</h2><p>我们知道每次调用一个函数都会创建一个函数执行上下文。</p><p>由于即使最简单的JavaScript程序也有很多函数调用，因此所有这些函数执行上下文都需要以某种方式进行管理。</p><p>看下面的例子：</p>',5),k=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"function"),c(),s("span",{class:"token function"},"a"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n  "),s("span",{class:"token comment"},"// some code"),c("\n"),s("span",{class:"token punctuation"},"}"),c("\n\n"),s("span",{class:"token keyword"},"function"),c(),s("span",{class:"token function"},"b"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n  "),s("span",{class:"token comment"},"// some code"),c("\n"),s("span",{class:"token punctuation"},"}"),c("\n\n"),s("span",{class:"token function"},"a"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n"),s("span",{class:"token function"},"b"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558012527-30035"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"function a() {\n  // some code\n}\n\nfunction b() {\n  // some code\n}\n\na();\nb();\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558012527-30035","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br")])],-1),y=a("<p><code>a()</code>遇到函数调用时，将如上所述创建函数执行上下文，并执行函数内部的代码。</p><p>当代码执行完成时（到达<code>return</code>语句或<code>}</code>函数的包围），该函数的函数执行上下文将<code>a()</code>被破坏。<br> 然后，<code>b()</code>遇到的调用，并且对function重复相同的过程<code>b()</code>。</p><p>但是，即使在非常简单的JavaScript程序中，也是如此。大多数时候，会有一些在其他函数内部调用的函数：</p>",3),b=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"function"),c(),s("span",{class:"token function"},"a"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n  "),s("span",{class:"token comment"},"// some code"),c("\n  "),s("span",{class:"token function"},"b"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n  "),s("span",{class:"token comment"},"// some more code"),c("\n"),s("span",{class:"token punctuation"},"}"),c("\n\n"),s("span",{class:"token keyword"},"function"),c(),s("span",{class:"token function"},"b"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n  "),s("span",{class:"token comment"},"// some code"),c("\n"),s("span",{class:"token punctuation"},"}"),c("\n\n"),s("span",{class:"token function"},"a"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558012527-62132"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"function a() {\n  // some code\n  b();\n  // some more code\n}\n\nfunction b() {\n  // some code\n}\n\na();\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558012527-62132","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br"),s("span",{class:"line-number"},"11"),s("br")])],-1),h=a('<p>在这种情况下，<code>a()</code>创建了一个函数执行上下文，但是恰好在<code>a()</code>执行的中间，<code>b()</code>遇到了调用。</p><p>为创建了一个全新的函数执行上下文<code>b()</code>，但没有销毁<code>a()</code>的执行上下文，因为其代码未完全执行。</p><p>这意味着同时存在许多函数执行上下文。但是，在任何给定时间实际上只有一个正在运行。</p><p>为了跟踪当前正在运行的堆栈，使用了一个堆栈，其中当前正在运行的函数执行上下文位于堆栈的顶部。</p><p>一旦完成执行，它将从堆栈中弹出，将继续执行下一个执行上下文，依此类推，直到执行堆栈为空。</p><p>该堆栈称为执行堆栈，如下图所示。<br><img src="https://gitee.com/artiely/Figure-bed/raw/master/images/20200319222146.png" alt=""></p><p>当执行堆栈为空时，我们之前讨论过且永不破坏的全局执行上下文将成为当前正在运行的执行上下文。</p><h2 id="事件队列"><a class="header-anchor" href="#事件队列" aria-hidden="true">#</a> 事件队列</h2><p>还记得我说过JavaScript引擎只是浏览器的一个组件，还有渲染引擎或网络层吗？</p><p>这些组件具有内置的Hooks，引擎可以使用它们与之通信以发起网络请求，在屏幕上绘制像素或监听鼠标单击。</p><p>当您fetch在JavaScript中使用类似方法进行HTTP请求时，引擎实际上会将其传达给网络层。每当请求的响应到达时，网络层就会将其传递回JavaScript引擎。</p><p>但这可能要花几秒钟，在请求进行过程中，JavaScript引擎会做什么？</p><p>只是停止执行任何代码，直到响应到来为止？继续执行其余的代码，每当响应到来时，停止一切并执行其回调？当回调完成后，无论中断在哪里，都可以继续执行？</p><p>以上都不是，即使第一个可以通过使用wait来实现。</p><p>在多线程语言中，可以通过一个线程在当前运行的执行上下文中执行代码，而另一个线程执行事件的回调来处理此问题。但这对于JavaScript是不可能的，因为它是单线程的。</p><p>要了解它是如何工作的，让我们考虑之前看过的<code>a()</code>和<code>b()</code>函数，但是添加一个单击处理程序和一个HTTP请求处理程序。</p>',16),f=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"function"),c(),s("span",{class:"token function"},"a"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n  "),s("span",{class:"token comment"},"// some code"),c("\n  "),s("span",{class:"token function"},"b"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n  "),s("span",{class:"token comment"},"// some more code"),c("\n"),s("span",{class:"token punctuation"},"}"),c("\n\n"),s("span",{class:"token keyword"},"function"),c(),s("span",{class:"token function"},"b"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n  "),s("span",{class:"token comment"},"// some code"),c("\n"),s("span",{class:"token punctuation"},"}"),c("\n\n"),s("span",{class:"token keyword"},"function"),c(),s("span",{class:"token function"},"httpHandler"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n  "),s("span",{class:"token comment"},"// some code here"),c("\n"),s("span",{class:"token punctuation"},"}"),c("\n\n"),s("span",{class:"token keyword"},"function"),c(),s("span",{class:"token function"},"clickHandler"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n  "),s("span",{class:"token comment"},"// some more code here"),c("\n"),s("span",{class:"token punctuation"},"}"),c("\n\n"),s("span",{class:"token function"},"a"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558012528-11526"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"function a() {\n  // some code\n  b();\n  // some more code\n}\n\nfunction b() {\n  // some code\n}\n\nfunction httpHandler() {\n  // some code here\n}\n\nfunction clickHandler() {\n  // some more code here\n}\n\na();\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558012528-11526","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br"),s("span",{class:"line-number"},"11"),s("br"),s("span",{class:"line-number"},"12"),s("br"),s("span",{class:"line-number"},"13"),s("br"),s("span",{class:"line-number"},"14"),s("br"),s("span",{class:"line-number"},"15"),s("br"),s("span",{class:"line-number"},"16"),s("br"),s("span",{class:"line-number"},"17"),s("br"),s("span",{class:"line-number"},"18"),s("br"),s("span",{class:"line-number"},"19"),s("br")])],-1),v=a('<p>JavaScript引擎从浏览器的其他组件接收到的任何事件，例如单击鼠标或网络响应，都不会立即处理。<br> 此时，JavaScript引擎可能正在忙于执行代码，因此它将把事件放在队列中称为<code>事件队列的</code>。<br><img src="https://gitee.com/artiely/Figure-bed/raw/master/images/20200319222307.png" alt=""></p><p>我们已经讨论了执行栈，以及一旦相应函数中的代码完成执行后如何从栈中弹出当前正在运行的函数执行上下文。</p><p>然后，下一个执行上下文继续执行直到完成，依此类推，直到堆栈为空，并且全局执行上下文成为当前正在运行的执行上下文。</p><p>尽管有代码要在执行堆栈上执行，但由于引擎正忙于在堆栈上执行代码，因此事件队列中的事件将被忽略。</p><p>仅当它完成并且执行堆栈为空时，JavaScript Engine才会处理事件队列中的下一个事件（当然，如果有一个事件），并将调用其处理程序。</p><p>由于该处理器是一个JavaScript函数，它就像被处理<code>a()</code>，并<code>b()</code>进行了处理，这意味着一个函数执行上下文被创建并推入执行堆栈。</p><p>如果该处理程序又调用了另一个函数，则将创建另一个函数执行上下文并将其压入堆栈顶部，依此类推。</p><p>仅当执行堆栈再次为空时，JavaScript引擎才会再次检查事件队列中是否有新事件。</p><p>键盘和鼠标事件也是如此。当单击鼠标时，JavaScript引擎将获得click事件，将其放置在事件队列中，并且仅在执行堆栈为空时才执行其处理程序。<br> 通过将以下代码复制粘贴到浏览器控制台中，您可以轻松地看到这一点：</p>',9),C=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"function"),c(),s("span",{class:"token function"},"documentClickHandler"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n  console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'CLICK!!!'"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n"),s("span",{class:"token punctuation"},"}"),c("\n\ndocument"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"addEventListener"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'click'"),s("span",{class:"token punctuation"},","),c(" documentClickHandler"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n\n"),s("span",{class:"token keyword"},"function"),c(),s("span",{class:"token function"},"a"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n  "),s("span",{class:"token keyword"},"const"),c(" fiveSecondsLater "),s("span",{class:"token operator"},"="),c(),s("span",{class:"token keyword"},"new"),c(),s("span",{class:"token class-name"},"Date"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"getTime"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token operator"},"+"),c(),s("span",{class:"token number"},"5000"),s("span",{class:"token punctuation"},";"),c("\n  "),s("span",{class:"token keyword"},"while"),c(),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"new"),c(),s("span",{class:"token class-name"},"Date"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"getTime"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token operator"},"<"),c(" fiveSecondsLater"),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),s("span",{class:"token punctuation"},"}"),c("\n"),s("span",{class:"token punctuation"},"}"),c("\n\n"),s("span",{class:"token function"},"a"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558012528-59247"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"function documentClickHandler() {\n  console.log('CLICK!!!');\n}\n\ndocument.addEventListener('click', documentClickHandler);\n\nfunction a() {\n  const fiveSecondsLater = new Date().getTime() + 5000;\n  while (new Date().getTime() < fiveSecondsLater) {}\n}\n\na();\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558012528-59247","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br"),s("span",{class:"line-number"},"11"),s("br"),s("span",{class:"line-number"},"12"),s("br")])],-1),w=a("<p>该<code>while</code>循环只是保持引擎繁忙五秒钟，不用太担心了。在这五秒钟内开始单击文档上的任何位置，您将看不到任何内容记录到控制台。<br> 当五秒钟过去并且执行堆栈为空时，将调用第一次单击的处理程序。<br> 由于这是一个函数，因此将创建函数执行上下文，将其推入堆栈，执行并从堆栈中弹出。然后，调用第二次单击的处理程序，依此类推。<br> 实际上，<code>setTimeout()</code>（和<code>setInterval()</code>）也会发生相同的情况。您提供的处理程序<code>setTimeout()</code>实际上位于事件队列中。<br> 这意味着，如果将超时设置为<code>0</code>但是在执行堆栈上有要执行的代码，<code>setTimeout()</code>则仅在堆栈为空时（可能会在几毫秒后）调用的处理程序。<br> 这其中的原因之一<code>setTimeout()</code>，并<code>setInterval()</code>没有真正精确。如果您不相信我的话，请将下一个要点复制并粘贴到浏览器控制台中。</p>",1),_=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[s("span",{class:"token function"},"setTimeout"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token operator"},"=>"),c(),s("span",{class:"token punctuation"},"{"),c("\n  console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'TIMEOUT HANDLER!!!'"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},","),c(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n\n"),s("span",{class:"token keyword"},"const"),c(" fiveSecondsLater "),s("span",{class:"token operator"},"="),c(),s("span",{class:"token keyword"},"new"),c(),s("span",{class:"token class-name"},"Date"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"getTime"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token operator"},"+"),c(),s("span",{class:"token number"},"5000"),s("span",{class:"token punctuation"},";"),c("\n"),s("span",{class:"token keyword"},"while"),c(),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"new"),c(),s("span",{class:"token class-name"},"Date"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"getTime"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token operator"},"<"),c(" fiveSecondsLater"),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),s("span",{class:"token punctuation"},"}"),c("\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558012528-66769"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"setTimeout(() => {\n  console.log('TIMEOUT HANDLER!!!');\n}, 0);\n\nconst fiveSecondsLater = new Date().getTime() + 5000;\nwhile (new Date().getTime() < fiveSecondsLater) {}\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558012528-66769","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br")])],-1),T=a('<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>注意：放入事件队列的代码称为异步。这是否一个好名词是一个不同的话题，但这就是人们所说的，所以我想您必须习惯它。</p></div><h2 id="函数执行上下文步骤"><a class="header-anchor" href="#函数执行上下文步骤" aria-hidden="true">#</a> 函数执行上下文步骤</h2><p>既然我们已经熟悉了JavaScript程序的执行生命周期，那么让我们进一步深入研究如何准确地创建函数执行上下文。</p><p>它分为两个步骤：创建步骤和执行步骤。</p><p>创建步骤“设置东西”，以便可以执行代码，而执行步骤实际执行它。<br> 在创建步骤中发生两件非常重要的事情：</p><ul><li>确定作用域。</li><li><code>this</code>确定的值（我假设您已经熟悉<code>this</code>JavaScript中的关键字）。</li></ul><p>接下来的两个相应部分将详细介绍这些功能。</p><h2 id="作用域与作用域链"><a class="header-anchor" href="#作用域与作用域链" aria-hidden="true">#</a> 作用域与作用域链</h2><p>作用域由在给定函数中可访问的变量和函数组成，即使它们未在函数本身中声明也是如此。</p><p>JavaScript具有词法作用域，这意味着该作用域是根据代码中声明函数的位置确定的。</p>',10),g=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"function"),c(),s("span",{class:"token function"},"a"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n  "),s("span",{class:"token keyword"},"function"),c(),s("span",{class:"token function"},"b"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n    console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),c("foo"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c(),s("span",{class:"token comment"},"// logs 'bar'"),c("\n  "),s("span",{class:"token punctuation"},"}"),c("\n\n  "),s("span",{class:"token keyword"},"var"),c(" foo "),s("span",{class:"token operator"},"="),c(),s("span",{class:"token string"},"'bar'"),s("span",{class:"token punctuation"},";"),c("\n  "),s("span",{class:"token function"},"b"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n"),s("span",{class:"token punctuation"},"}"),c("\n\n"),s("span",{class:"token function"},"a"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558012528-56951"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"function a() {\n  function b() {\n    console.log(foo); // logs 'bar'\n  }\n\n  var foo = 'bar';\n  b();\n}\n\na();\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558012528-56951","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br")])],-1),j=a("<p>到达时<code>console.log(foo)</code>以上时，JavaScript引擎将首先检查是否有一个变量<code>foo</code>中<code>b()</code>的执行上下文的作用域。</p><p>由于没有声明，它会转到“父”执行上下文（即<code>a()</code>的执行上下文），这仅仅是因为<code>b()</code>声明在<code>a()</code>内部。在此执行上下文的作用域内，它找到<code>foo</code>并打印其值。</p><p>如果我们<code>b()</code>在外面提取<code>a()</code>，像这样：</p>",3),S=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"function"),c(),s("span",{class:"token function"},"a"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n  "),s("span",{class:"token keyword"},"var"),c(" foo "),s("span",{class:"token operator"},"="),c(),s("span",{class:"token string"},"'bar'"),s("span",{class:"token punctuation"},";"),c("\n  "),s("span",{class:"token function"},"b"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n"),s("span",{class:"token punctuation"},"}"),c("\n\n"),s("span",{class:"token keyword"},"function"),c(),s("span",{class:"token function"},"b"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n  console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),c("foo"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c(),s("span",{class:"token comment"},"// throws ReferenceError: foo is not defined"),c("\n"),s("span",{class:"token punctuation"},"}"),c("\n\n"),s("span",{class:"token function"},"a"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558012528-77481"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"function a() {\n  var foo = 'bar';\n  b();\n}\n\nfunction b() {\n  console.log(foo); // throws ReferenceError: foo is not defined\n}\n\na();\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558012528-77481","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br")])],-1),I=a('<p>引发<code>ReferenceError</code>(引用错误)，导致两者之间的唯一区别是<code>b()</code>的声明位置。</p><p><code>b()</code>的“父”作用域现在是全局执行上下文的作用域，因为它是在任何函数之外的全局级别声明的，并且那里没有变量<code>foo</code>。</p><p>我可以看到为什么这会造成混淆，因为如果您查看执行堆栈，它看起来像这样：</p><p><img src="https://gitee.com/artiely/Figure-bed/raw/master/images/20200319222852.png" alt=""></p><p>因此，很容易假设“父级”执行上下文是堆栈中的下一个上下文，在当前上下文之下。但是，事实并非如此。</p><p>在第一个示例中，<code>a()</code>执行上下文确实<code>b()</code>是“父”执行上下文。并不是因为<code>a()</code>恰好是执行堆栈中的下一个项目，就在下面<code>b()</code>，而是因为它<code>b()</code>是在内部声明的<code>a()</code>。</p><p>在第二个示例中，执行堆栈看起来相同，但是这次<code>b()</code>的“父”执行上下文是全局执行上下文，因为它<code>b()</code>是在全局级别上声明的。</p><p>只需记住：在何处调用函数无关紧要，重要的是在哪声明它。</p><p>但是，如果在“父”执行上下文的范围内也找不到该变量，会发生什么呢？</p><p>在这种情况下，它将尝试以完全相同的方式在下一个“父”执行上下文的作用域中找到它。</p><p>如果不存在，它将尝试下一个，依此类推，直到最终到达全局执行上下文的范围。如果在该处也找不到它，则会抛出一个<code>ReferenceError</code>。<br> 这称为<code>作用域链</code>，这正是在以下示例中发生的情况：</p>',11),A=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"function"),c(),s("span",{class:"token function"},"a"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n  "),s("span",{class:"token keyword"},"function"),c(),s("span",{class:"token function"},"b"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n    "),s("span",{class:"token keyword"},"function"),c(),s("span",{class:"token function"},"c"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n      console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),c("foo"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n    "),s("span",{class:"token punctuation"},"}"),c("\n    \n    "),s("span",{class:"token function"},"c"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n  "),s("span",{class:"token punctuation"},"}"),c("\n  \n  "),s("span",{class:"token keyword"},"var"),c(" foo "),s("span",{class:"token operator"},"="),c(),s("span",{class:"token string"},"'bar'"),s("span",{class:"token punctuation"},";"),c("\n  "),s("span",{class:"token function"},"b"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n"),s("span",{class:"token punctuation"},"}"),c("\n\n"),s("span",{class:"token function"},"a"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558012528-77963"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"function a() {\n  function b() {\n    function c() {\n      console.log(foo);\n    }\n    \n    c();\n  }\n  \n  var foo = 'bar';\n  b();\n}\n\na();\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558012528-77963","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br"),s("span",{class:"line-number"},"11"),s("br"),s("span",{class:"line-number"},"12"),s("br"),s("span",{class:"line-number"},"13"),s("br"),s("span",{class:"line-number"},"14"),s("br")])],-1),x=a('<p>它首先尝试在<code>c()</code>的执行上下文范围内查找<code>foo</code>，然后在<code>b()</code>的范围内查找，然后最终在<code>a()</code>的范围内找到它。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>注意：请记住，它仅从<code>c()</code>到<code>b()</code>再到<code>a()</code>，因为它们是在另一个内部声明的，而不是因为它们的相应执行上下文在执行堆栈中位于另一个之上。</p></div><p>如果它们不会在另一个内部声明，则如上所述，“父”执行上下文将不同。</p><p>然而，如果有另外一个变量<code>foo</code>里面<code>c()</code>或者<code>b()</code>，它的价值将被记录到控制台上，由于引擎停止为“父”执行上下文只要它找到的变量“寻找”。</p><p>但是，如果<code>c()</code>或<code>b()</code>内还有另一个变量<code>foo</code>，则其值将被记录到控制台，因为一旦找到变量，引擎就会停止“寻找”“父”执行上下文。</p><p>同样的功能不仅适用于变量，还适用于函数，适用于全局变量，例如上面的<code>console</code>本身。</p><p>它将在作用域链中下降（或上升，具体取决于您的方式），寻找一个名为<code>console</code>的变量，最终它将在附加到window对象的全局执行上下文中找到它。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>注意：尽管我仅在上面的示例中使用了函数声明语法，但作用域和作用域链的工作原理与箭头函数完全相同，这是ES2015中引入的（也称为ES6）。</p></div><h2 id="闭包"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h2><p>闭包提供从内部函数访问外部函数的作用域。</p><p>但是，这并不是什么新鲜事物，我在上面刚刚描述了如何通过作用域链实现这一目标。</p><p>闭包的特别之处在于，即使外部函数的代码已执行，其执行上下文从执行堆栈中弹出并销毁，内部函数仍将引用外部函数的作用域。</p>',12),E=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"function"),c(),s("span",{class:"token function"},"a"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n  "),s("span",{class:"token keyword"},"var"),c(" name "),s("span",{class:"token operator"},"="),c(),s("span",{class:"token string"},"'John Doe'"),s("span",{class:"token punctuation"},";"),c("\n  \n  "),s("span",{class:"token keyword"},"function"),c(),s("span",{class:"token function"},"b"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n    "),s("span",{class:"token keyword"},"return"),c(" name"),s("span",{class:"token punctuation"},";"),c("\n  "),s("span",{class:"token punctuation"},"}"),c("\n\n  "),s("span",{class:"token keyword"},"return"),c(" b"),s("span",{class:"token punctuation"},";"),c("\n"),s("span",{class:"token punctuation"},"}"),c("\n\n"),s("span",{class:"token keyword"},"var"),c(" c "),s("span",{class:"token operator"},"="),c(),s("span",{class:"token function"},"a"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n\n"),s("span",{class:"token function"},"c"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558012528-38480"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"function a() {\n  var name = 'John Doe';\n  \n  function b() {\n    return name;\n  }\n\n  return b;\n}\n\nvar c = a();\n\nc();\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558012528-38480","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br"),s("span",{class:"line-number"},"11"),s("br"),s("span",{class:"line-number"},"12"),s("br"),s("span",{class:"line-number"},"13"),s("br")])],-1),P=a('<p>这正是上面示例中发生的情况。 <code>b()</code>在<code>a()</code>内部声明，因此它可以通过作用域链从<code>a()</code>的作用域访问<code>name</code>变量。</p><p>但是它不仅可以访问它，而且还创建了一个<code>闭包</code>，这意味着即使父函数<code>a()</code>返回后，它也可以访问它。 变量<code>c</code>只是对内部函数<code>b()</code>的引用，因此代码的最后一行实际上调用了内部函数<code>b()</code>。</p><p>即使在返回<code>b()</code>的外部函数<code>a()</code>之后很长一段时间，内部函数<code>b()</code>仍然可以访问父函数的作用域。</p><h2 id="this"><a class="header-anchor" href="#this" aria-hidden="true">#</a> this</h2><p>在执行上下文的创建步骤中确定的下一件事是<code>this</code>的值。</p><p>恐怕这不像作用域那样简单，因为函数内部<code>this</code>的值取决于函数的调用方式。</p><p>并且，为了使其更复杂，可以“覆盖”默认行为。</p><p>我将尽力使说明简单明了，您可以在MDN上找到有关此主题的更详细的文章。</p><p>首先，这取决于是否使用函数声明来声明函数：</p>',9),N=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"function"),c(),s("span",{class:"token function"},"a"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n  "),s("span",{class:"token comment"},"// ..."),c("\n"),s("span",{class:"token punctuation"},"}"),c("\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558012529-29850"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"function a() {\n  // ...\n}\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558012529-29850","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br")])],-1),D=s("p",null,"或箭头功能：",-1),$=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"const"),c(),s("span",{class:"token function-variable function"},"a"),c(),s("span",{class:"token operator"},"="),c(),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token operator"},"=>"),c(),s("span",{class:"token punctuation"},"{"),c("\n  "),s("span",{class:"token comment"},"// ..."),c("\n"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),c("\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558012529-36497"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"const a = () => {\n  // ...\n};\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558012529-36497","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br")])],-1),F=a('<p>如上所述，两者的作用域确定为完全相同，但<code>this</code>不同。</p><h3 id="箭头函数"><a class="header-anchor" href="#箭头函数" aria-hidden="true">#</a> 箭头函数</h3><p>我将从简单的一开始。对于箭头函数，<code>this</code>的值是词法，因此其确定方式与确定作用域的方式类似。</p><p>“父”执行上下文的确定与“ 作用域和作用域链”部分中所述的完全相同，具体取决于声明箭头函数的位置。</p><p><code>this</code>的值将与父执行上下文中的<code>this</code>值相同，在此情况下，将按照本节中的说明进行确定。</p><p>我们可以在下面的两个示例中看到这一点。</p><p>第一个将记录日志<code>true</code>，而第二个将记录日志<code>false</code>，即使<code>myArrowFunction</code>在两种情况下都是在同一位置调用的。两者之间的唯一区别是在哪里<code>myArrowFunction</code>声明了箭头功能。</p>',7),J=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"const"),c(),s("span",{class:"token function-variable function"},"myArrowFunction"),c(),s("span",{class:"token operator"},"="),c(),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token operator"},"=>"),c(),s("span",{class:"token punctuation"},"{"),c("\n  console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"this"),c(),s("span",{class:"token operator"},"==="),c(" window"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),c("\n\n"),s("span",{class:"token keyword"},"class"),c(),s("span",{class:"token class-name"},"MyClass"),c(),s("span",{class:"token punctuation"},"{"),c("\n  "),s("span",{class:"token function"},"constructor"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n    "),s("span",{class:"token function"},"myArrowFunction"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n  "),s("span",{class:"token punctuation"},"}"),c("\n"),s("span",{class:"token punctuation"},"}"),c("\n\n"),s("span",{class:"token keyword"},"var"),c(" myClassInstance "),s("span",{class:"token operator"},"="),c(),s("span",{class:"token keyword"},"new"),c(),s("span",{class:"token class-name"},"MyClass"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558012529-97164"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"const myArrowFunction = () => {\n  console.log(this === window);\n};\n\nclass MyClass {\n  constructor() {\n    myArrowFunction();\n  }\n}\n\nvar myClassInstance = new MyClass();\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558012529-97164","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br"),s("span",{class:"line-number"},"11"),s("br")])],-1),V=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"class"),c(),s("span",{class:"token class-name"},"MyClass"),c(),s("span",{class:"token punctuation"},"{"),c("\n  "),s("span",{class:"token function"},"constructor"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n    "),s("span",{class:"token keyword"},"const"),c(),s("span",{class:"token function-variable function"},"myArrowFunction"),c(),s("span",{class:"token operator"},"="),c(),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token operator"},"=>"),c(),s("span",{class:"token punctuation"},"{"),c("\n      console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"this"),c(),s("span",{class:"token operator"},"==="),c(" window"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n    "),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),c("\n    "),s("span",{class:"token function"},"myArrowFunction"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n  "),s("span",{class:"token punctuation"},"}"),c("\n"),s("span",{class:"token punctuation"},"}"),c("\n\n"),s("span",{class:"token keyword"},"var"),c(" myClassInstance "),s("span",{class:"token operator"},"="),c(),s("span",{class:"token keyword"},"new"),c(),s("span",{class:"token class-name"},"MyClass"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558012529-11224"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"class MyClass {\n  constructor() {\n    const myArrowFunction = () => {\n      console.log(this === window);\n    };\n    myArrowFunction();\n  }\n}\n\nvar myClassInstance = new MyClass();\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558012529-11224","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br")])],-1),O=a('<p>因为<code>this</code>的值在<code>myArrowFunction</code>词法的，所以它将<code>window</code>在第一个示例中出现，因为它是在任何函数或类之外的全局级别声明的。</p><p>在第二示例中，的值this内myArrowFunction将是任何的值this，函数内部的包裹它。<br> 在本节的后面，我将深入探讨确切的值，但window就象第一个示例一样，现在足以注意到它不是。<br> 切记：对于箭头函数，的值this是根据箭头函数的声明位置而不是其调用位置或方式确定的。</p><p>由于<code>myArrowFunction</code>内部的<code>this</code>的值取决于词法环境，因此在第一个示例中它将是<code>window</code>，因为它是在任何函数或类之外的全局级别声明的。</p><p>在第二个示例中，<code>myArrowFunction</code>内部的<code>this</code>值将是包装它的函数内部的<code>this</code>值。</p><p>切记：对于箭头函数，此值是根据声明箭头函数的位置（而不是在何处或如何调用）确定的。</p><h3 id="函数声明"><a class="header-anchor" href="#函数声明" aria-hidden="true">#</a> 函数声明</h3><p>在这种情况下，事情并不是那么简单，这恰恰是在ES2015中引入箭头功能的原因（或其中至少一个原因），但请耐心等待，在后面的几段中都说得通。</p><p>除了箭头函数（<code>const a = () =&gt; { … }</code>）和函数声明（<code>function a() { … }</code>）在语法上的区别外，<code>this</code>每个内部的值是两者之间的主要区别。</p><p>与箭头函数不同，<code>this</code>内部函数声明的值不是根据声明函数的位置的词法来确定的。</p><p>它是根据函数的调用方式确定的。有几种方法可以调用一个函数：</p><ul><li>简单调用： <code>myFunction()</code></li><li>对象方法调用： <code>myObject.myFunction()</code></li><li>构造函数调用： <code>new myFunction()</code></li><li>DOM事件处理程序调用： <code>document.addEventListener(&#39;click&#39;, myFunction)</code></li></ul><p>对于每种类型的调用，<code>myFunction()</code>内部的<code>this</code>的值是不同的，而与<code>myFunction()</code>的声明位置无关，因此让我们逐一检查它们的工作方式。</p><h3 id="简单调用"><a class="header-anchor" href="#简单调用" aria-hidden="true">#</a> 简单调用</h3>',13),M=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"function"),c(),s("span",{class:"token function"},"myFunction"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n  "),s("span",{class:"token keyword"},"return"),c(),s("span",{class:"token keyword"},"this"),c(),s("span",{class:"token operator"},"==="),c(" window"),s("span",{class:"token punctuation"},";"),c(),s("span",{class:"token comment"},"// true"),c("\n"),s("span",{class:"token punctuation"},"}"),c("\n\n"),s("span",{class:"token function"},"myFunction"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558012529-60088"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"function myFunction() {\n  return this === window; // true\n}\n\nmyFunction();\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558012529-60088","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br")])],-1),R=a('<p>简单调用就是像上面的示例中那样简单地调用一个函数：单独的函数名称，不带任何前面的字符，后跟<code>()</code>（当然，内部带有任何可选参数）。</p><p>在简单调用的情况下，<code>this</code>函数内部的值始终是<code>global this</code>，而后者又指向全局<code>window</code>对象，如上一节中所述。</p><p>而已！但是请记住，这仅适用于简单的调用。函数名称，后跟<code>()</code>。没有前面的字符。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>注意：因为<code>this</code>简单函数调用中的值实际上是对全局<code>window</code>对象的引用，所以使用本<code>this</code>应由简单调用来调用的内部函数被认为是不好的做法。</p></div><p>这是因为附加到<code>this</code>函数内部的任何属性实际上都附加到<code>window</code>对象并成为全局变量，这是一种不好的做法。</p><p>这就是为什么在严格模式下，<code>this</code>简单调用所调用的任何函数中的值均为<code>undefined</code>，并且上面的示例将输出的原因<code>false</code>。</p><h3 id="对象方法调用"><a class="header-anchor" href="#对象方法调用" aria-hidden="true">#</a> 对象方法调用</h3>',7),B=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"const"),c(" myObject "),s("span",{class:"token operator"},"="),c(),s("span",{class:"token punctuation"},"{"),c("\n  "),s("span",{class:"token function-variable function"},"myMethod"),s("span",{class:"token operator"},":"),c(),s("span",{class:"token keyword"},"function"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n    "),s("span",{class:"token keyword"},"return"),c(),s("span",{class:"token keyword"},"this"),c(),s("span",{class:"token operator"},"==="),c(" myObject"),s("span",{class:"token punctuation"},";"),c(),s("span",{class:"token comment"},"// true"),c("\n  "),s("span",{class:"token punctuation"},"}"),c("\n"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),c("\n\nmyObject"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"myMethod"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558012529-73234"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"const myObject = {\n  myMethod: function() {\n    return this === myObject; // true\n  }\n};\n\nmyObject.myMethod();\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558012529-73234","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br")])],-1),H=a('<p>当对象的属性具有函数作为其值时，它被视为该对象的方法，因此称为方法调用。</p><p>当使用这种类型的调用时，<code>this</code>函数内部的值将仅指向在上面示例中调用了该方法的对象<code>myObject</code>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>注意：如果将使用箭头函数语法，而不是上面示例中的函数声明，则<code>this</code>该箭头函数内部的值将是全局<code>window</code>对象。</p></div><p>这是因为其父执行上下文将是全局执行上下文。它在对象内部声明的事实不会改变任何东西。</p><h3 id="构造函数调用"><a class="header-anchor" href="#构造函数调用" aria-hidden="true">#</a> 构造函数调用</h3><p>可以调用函数的另一种方法是在调用之前添加<code>new</code>关键字，如下例所示。</p><p>以这种方式调用时，该函数将返回一个新对象（即使它没有<code>return</code>语句），并且<code>this</code>函数内部的值将指向该新创建的对象。</p><p>解释有点简化（有关<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new" target="_blank" rel="noopener noreferrer">MDN</a>的更多信息），但要点是它将创建（或构造，因此构造函数）并返回<code>this</code>将指向函数内部的对象。</p>',8),L=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"function"),c(),s("span",{class:"token function"},"MyConstructorFunction"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n  "),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},"."),c("a "),s("span",{class:"token operator"},"="),c(),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},";"),c("\n"),s("span",{class:"token punctuation"},"}"),c("\n\n"),s("span",{class:"token keyword"},"const"),c(" myObject "),s("span",{class:"token operator"},"="),c(),s("span",{class:"token keyword"},"new"),c(),s("span",{class:"token class-name"},"MyConstructorFunction"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c(),s("span",{class:"token comment"},"// a new object is created"),c("\n\n"),s("span",{class:"token comment"},'// inside MyConstructorFunction(), "this" points to the newly created onject,'),c("\n"),s("span",{class:"token comment"},'// so it should have a property  "a".'),c("\nmyObject"),s("span",{class:"token punctuation"},"."),c("a"),s("span",{class:"token punctuation"},";"),c(),s("span",{class:"token comment"},"// 1"),c("\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558012529-36494"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":'function MyConstructorFunction() {\n  this.a = 1;\n}\n\nconst myObject = new MyConstructorFunction(); // a new object is created\n\n// inside MyConstructorFunction(), "this" points to the newly created onject,\n// so it should have a property  "a".\nmyObject.a; // 1\n',"data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558012529-36494","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br")])],-1),q=s("div",{class:"tip custom-block"},[s("p",{class:"custom-block-title"},"TIP"),s("p",null,[c("注意：在上使用"),s("code",null,"new"),c("关键字时，也是如此，因为类实际上是特殊函数，只有很小的区别。"),s("br"),c(" 注意：箭头函数不能用作构造函数。")])],-1),U=s("h3",{id:"dom事件处理程序调用"},[s("a",{class:"header-anchor",href:"#dom事件处理程序调用","aria-hidden":"true"},"#"),c(" DOM事件处理程序调用")],-1),z=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[c("document"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"addEventListener"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'click'"),s("span",{class:"token punctuation"},","),c(" DOMElementHandler"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n\n"),s("span",{class:"token keyword"},"function"),c(),s("span",{class:"token function"},"DOMElementHandler"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n  console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"this"),c(),s("span",{class:"token operator"},"==="),c(" document"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c(),s("span",{class:"token comment"},"// true"),c("\n"),s("span",{class:"token punctuation"},"}"),c("\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558012529-95122"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"document.addEventListener('click', DOMElementHandler);\n\nfunction DOMElementHandler() {\n  console.log(this === document); // true\n}\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558012529-95122","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br")])],-1),K=a('<p>当作为DOM事件处理程序调用时，函数<code>this</code>内部的值将是放置事件的DOM元素。</p><p>但是，对于事件处理程序，我们不这样做，我们仅将引用传递给处理程序函数。JavaScript引擎调用该函数，我们无法控制它将如何执行。</p><h3 id="使用自定义值调用this"><a class="header-anchor" href="#使用自定义值调用this" aria-hidden="true">#</a> 使用自定义值调用this</h3><p>可以使用<code>Function.prototype</code>中的<code>bind()</code>，<code>call()</code>或<code>apply()</code>调用函数内部的<code>this</code>的值，将其显式设置为自定义值。</p>',4),W=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"const"),c(" obj "),s("span",{class:"token operator"},"="),c(),s("span",{class:"token punctuation"},"{"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),c("\n\n"),s("span",{class:"token keyword"},"function"),c(),s("span",{class:"token function"},"a"),s("span",{class:"token punctuation"},"("),s("span",{class:"token parameter"},[c("param1"),s("span",{class:"token punctuation"},","),c(" param2")]),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n\t"),s("span",{class:"token keyword"},"return"),c(),s("span",{class:"token punctuation"},"["),s("span",{class:"token keyword"},"this"),c(),s("span",{class:"token operator"},"==="),c(" window"),s("span",{class:"token punctuation"},","),c(),s("span",{class:"token keyword"},"this"),c(),s("span",{class:"token operator"},"==="),c(" obj"),s("span",{class:"token punctuation"},","),c(" param1"),s("span",{class:"token punctuation"},","),c(" param2"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},";"),c("\n"),s("span",{class:"token punctuation"},"}"),c("\n\n"),s("span",{class:"token function"},"a"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"call"),s("span",{class:"token punctuation"},"("),c("obj"),s("span",{class:"token punctuation"},","),c(),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},","),c(),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c(),s("span",{class:"token comment"},"// [false, true, 1, 2]"),c("\n"),s("span",{class:"token function"},"a"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"apply"),s("span",{class:"token punctuation"},"("),c("obj"),s("span",{class:"token punctuation"},","),c(),s("span",{class:"token punctuation"},"["),s("span",{class:"token number"},"3"),s("span",{class:"token punctuation"},","),c(),s("span",{class:"token number"},"4"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c(),s("span",{class:"token comment"},"// [false, true, 3, 4]"),c("\n"),s("span",{class:"token function"},"a"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"bind"),s("span",{class:"token punctuation"},"("),c("obj"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"5"),s("span",{class:"token punctuation"},","),c(),s("span",{class:"token number"},"6"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("  "),s("span",{class:"token comment"},"// [false, true, 5, 6]"),c("\n"),s("span",{class:"token function"},"a"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"7"),s("span",{class:"token punctuation"},","),c(),s("span",{class:"token number"},"8"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("   "),s("span",{class:"token comment"},"// [true, false, 7, 8]"),c("\n\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558012529-22424"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"const obj = {};\n\nfunction a(param1, param2) {\n\treturn [this === window, this === obj, param1, param2];\n}\n\na.call(obj, 1, 2); // [false, true, 1, 2]\na.apply(obj, [3, 4]); // [false, true, 3, 4]\na.bind(obj)(5, 6);  // [false, true, 5, 6]\na(7, 8);   // [true, false, 7, 8]\n\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558012529-22424","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br"),s("span",{class:"line-number"},"11"),s("br")])],-1),G=a("<p>上面的示例显示了这些功能的工作方式。<br><code>call()</code>并且<code>apply()</code>非常相似，唯一的不同是<code>apply()</code>函数的参数作为数组传递。</p><p>尽管<code>call()</code>和<code>apply()</code>实际上以该设置的值作为您作为第一个参数传入的值来调用该函数，但<code>bind()</code>不会调用该函数。</p><p>它改为返回一个新函数，该函数与使用<code>bind()</code>的函数完全相同，但是<code>this</code>的值设置为<code>bind()</code>参数传递的值。</p><p>这就是为什么您在<code>a.bind(obj)</code>之后看到<code>(5，6)</code>实际调用<code>bind()</code>返回的函数的原因。</p><p>对于<code>bind()</code>，<code>this</code>返回函数内部的值将永久绑定到您作为<code>this</code>值传递的任何内容（因此名为 <code>bind()</code>）。</p><p>无论使用哪种类型的调用，<code>this</code>返回函数内部的值始终是作为参数提供的值。它只能通过<code>call()</code>，<code>bind()</code>或<code>apply()</code>再次修改。</p><p>上一段几乎是完全正确的。当然，该规则必须有一个例外，该例外是构造函数的调用。</p><p>当以这种方式调用一个函数时，通过将<code>new</code>关键字放在调用之前，该函数内的<code>this</code>值将始终是调用返回的对象，即使使用<code>bind()</code>将新函数赋予了另一个关键字也是如此。</p><p>您可以在以下示例中进行检查：</p>",9),Q=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"function"),c(),s("span",{class:"token function"},"a"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n  "),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},"."),c("three "),s("span",{class:"token operator"},"="),c(),s("span",{class:"token string"},"'three'"),s("span",{class:"token punctuation"},";"),c("\n  console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n"),s("span",{class:"token punctuation"},"}"),c("\n​\n"),s("span",{class:"token keyword"},"const"),c(" customThisOne "),s("span",{class:"token operator"},"="),c(),s("span",{class:"token punctuation"},"{"),c(" one"),s("span",{class:"token operator"},":"),c(),s("span",{class:"token string"},"'one'"),c(),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),c("\n"),s("span",{class:"token keyword"},"const"),c(" customThisTwo "),s("span",{class:"token operator"},"="),c(),s("span",{class:"token punctuation"},"{"),c(" two"),s("span",{class:"token operator"},":"),c(),s("span",{class:"token string"},"'two'"),c(),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),c("\n​\n"),s("span",{class:"token keyword"},"const"),c(" bound "),s("span",{class:"token operator"},"="),c(),s("span",{class:"token function"},"a"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"bind"),s("span",{class:"token punctuation"},"("),c("customThisOne"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c(),s("span",{class:"token comment"},"// 返回一个新函数，该函数的值绑定到customThisOne"),c("\n"),s("span",{class:"token function"},"bound"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c(),s("span",{class:"token comment"},"// 打印 customThisOne"),c("\n"),s("span",{class:"token function"},"bound"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"call"),s("span",{class:"token punctuation"},"("),c("customThisTwo"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c(),s("span",{class:"token comment"},"// 打印 customThisOne, 即使传递customThisTwo"),c("\n"),s("span",{class:"token function"},"bound"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"apply"),s("span",{class:"token punctuation"},"("),c("customThisTwo"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c(),s("span",{class:"token comment"},"// 同上"),c("\n"),s("span",{class:"token keyword"},"new"),c(),s("span",{class:"token class-name"},"bound"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c(),s("span",{class:"token comment"},"// 打印新调用返回的对象，并绕过.bind（customThisOne）"),c("\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558012530-32941"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"function a() {\n  this.three = 'three';\n  console.log(this);\n}\n​\nconst customThisOne = { one: 'one' };\nconst customThisTwo = { two: 'two' };\n​\nconst bound = a.bind(customThisOne); // 返回一个新函数，该函数的值绑定到customThisOne\nbound(); // 打印 customThisOne\nbound.call(customThisTwo); // 打印 customThisOne, 即使传递customThisTwo\nbound.apply(customThisTwo); // 同上\nnew bound(); // 打印新调用返回的对象，并绕过.bind（customThisOne）\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558012530-32941","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br"),s("span",{class:"line-number"},"11"),s("br"),s("span",{class:"line-number"},"12"),s("br"),s("span",{class:"line-number"},"13"),s("br")])],-1),X=s("p",null,[c("这是一个示例，说明了如何使用"),s("code",null,"bind()"),c("来为我们前面讨论的点击事件处理程序控制"),s("code",null,"this"),c("：")],-1),Y=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"const"),c(" myCustomThis "),s("span",{class:"token operator"},"="),c(),s("span",{class:"token punctuation"},"{"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),c("\ndocument"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"addEventListener"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'click'"),s("span",{class:"token punctuation"},","),c(),s("span",{class:"token function"},"DOMElementHandler"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"bind"),s("span",{class:"token punctuation"},"("),c("myCustomThis"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n\n"),s("span",{class:"token keyword"},"function"),c(),s("span",{class:"token function"},"DOMElementHandler"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n  console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"this"),c(),s("span",{class:"token operator"},"==="),c(" document"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c(),s("span",{class:"token comment"},"// false (used to be true before bind() was used)"),c("\n  console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"this"),c(),s("span",{class:"token operator"},"==="),c(" myCustomThis"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c(),s("span",{class:"token comment"},"// true"),c("\n"),s("span",{class:"token punctuation"},"}"),c("\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558012530-43358"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"const myCustomThis = {};\ndocument.addEventListener('click', DOMElementHandler.bind(myCustomThis));\n\nfunction DOMElementHandler() {\n  console.log(this === document); // false (used to be true before bind() was used)\n  console.log(this === myCustomThis); // true\n}\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558012530-43358","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br")])],-1),Z=a('<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>注意：<code>bind()</code>，<code>call()</code>和<code>apply()</code>不能用于将自定义<code>this</code>值传递给箭头函数。</p></div><h2 id="注意箭头函数"><a class="header-anchor" href="#注意箭头函数" aria-hidden="true">#</a> 注意箭头函数</h2><p>现在，您可以了解这些函数声明规则，尽管相当简单，但由于所有特殊情况，它们如何引起混乱，并成为bug的来源。</p><p>对如何调用函数的微小更改将更改其内部的<code>this</code>。 这可能会引起整个连锁反应，这就是为什么了解这些规则以及它们如何影响您的代码很重要。</p><p>这就是编写JavaScript规范的人提出箭头函数的原因，其中箭头的<code>this</code>始终是词法环境，并且每次都被确定为完全相同，而不管它们如何被调用。</p><h2 id="声明提升"><a class="header-anchor" href="#声明提升" aria-hidden="true">#</a> 声明提升</h2><p>我之前提到过，当调用一个函数时，JavaScript引擎将首先遍历代码，找出的<code>作用域</code>和<code>this</code>，并标识在函数主体中声明的变量和函数。</p><p>在第一步（创建步骤）中，这些变量将获得一个特殊值<code>undefined</code>，而不管代码中为其分配了什么实际值。</p><p>仅在第二步（执行步骤）中为它们分配实际值，并且仅在到达分配行时才会发生。</p><p>这就是为什么以下JavaScript代码将记录的原因<code>undefined</code>：</p>',10),nn=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[c("console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),c("a"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c(),s("span",{class:"token comment"},"// undefined"),c("\n\n"),s("span",{class:"token keyword"},"var"),c(" a "),s("span",{class:"token operator"},"="),c(),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},";"),c("\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558012530-96773"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"console.log(a); // undefined\n\nvar a = 1;\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558012530-96773","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br")])],-1),tn=a('<p>然后，在执行步骤中，到达将<code>a</code>记录到控制台的行。 记录<code>undefined</code>，因为这是在上一步中设置为<code>a</code>的值。</p><p>到达分配了<code>a</code>的值<code>1</code>的行时，<code>a</code>的值将更改为<code>1</code>，但<code>undefined</code>的值已记录到控制台。</p><p>这种效果称为<code>声明提升</code>，就像所有变量声明都提升到代码顶部一样。</p><p>如您所见，这并不是真的发生的事情，但这是用来描述它的术语。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>注意：箭头函数不会也会发生这种情况，但函数声明会发生这种情况。</p></div><p>在创建步骤中，不会为函数分配未定义的特殊值，而是将整个函数放入内存中。 这就是为什么在声明函数之前就可以调用它的原因，例如下面的示例，它可以正常工作。</p>',6),an=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[s("span",{class:"token function"},"a"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n\n"),s("span",{class:"token keyword"},"function"),c(),s("span",{class:"token function"},"a"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),c(),s("span",{class:"token punctuation"},"{"),c("\n  "),s("span",{class:"token function"},"alert"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"It\'s me!"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),c("\n"),s("span",{class:"token punctuation"},"}"),c("\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558012530-71693"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":'a();\n\nfunction a() {\n  alert("It\'s me!");\n}\n',"data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558012530-71693","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br")])],-1),sn=a('<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>注意：当尝试访问一个尚未定义的变量时，将引发<code>ReferenceError: x is not defined</code>。</p></div><p>因此，“undefined”和“not defined”之间存在差异，这可能会造成混淆。</p><h2 id="结论"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> 结论</h2><p>我记得读过有关声明提升，作用域，闭合等的文章，当我阅读它们时，它们都是有意义的，但是那时，我总是会遇到一些我无法解释的怪异JavaScript行为。</p><p>问题是我总是每次都单独阅读每个概念。</p><p>因此，我尝试了解大局，例如JavaScript引擎本身。如何创建执行上下文并将其推送到执行堆栈，事件队列如何工作，如何确定<code>this</code>作用域和作用域链等。</p><p>在那之后，其他一切都变得有意义。我开始更早地发现潜在的问题，更快地确定了错误的来源，并且对我的编码总体上更加自信。</p><p>希望本文对您有帮助！</p>',8);o.render=function(a,s,c,e,o,cn){return n(),t("div",null,[i,l,p,d,u,r,m,k,y,b,h,f,v,C,w,_,T,g,j,S,I,A,x,E,P,N,D,$,F,J,V,O,M,R,B,H,L,q,U,z,K,W,G,Q,X,Y,Z,nn,tn,an,sn])};export default o;export{e as __pageData};
