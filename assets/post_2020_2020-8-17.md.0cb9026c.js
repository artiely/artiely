import{o as i,c as l,t as e}from"./app.746f22cf.js";const t='{"title":"前端性能优化","description":"","frontmatter":{"title":"前端性能优化","tag":["gzip","javaScript","DNS"],"cover":"https://gitee.com/artiely/Figure-bed/raw/master/image/20200821141939.png","base64":"2884fc","author":"artiely","date":"2020-8-17"},"relativePath":"post/2020/2020-8-17.md","lastUpdated":1629110853775}',a={},r=e('<h1 id="前端性能优化"><a class="header-anchor" href="#前端性能优化" aria-hidden="true">#</a> 前端性能优化</h1><p>关于 性能优化 是个大的面，这篇文章主要涉及到 前端 的几个点，如 前端性能优化 的流程、常见技术手段、工具等。</p><ol><li>尽量减少 HTTP 请求个数——须权衡</li><li>使用 CDN（内容分发网络）</li><li>为文件头指定 Expires 或 Cache-Control ，使内容具有缓存性。</li><li>避免空的 src 和 href</li><li>使用 gzip 压缩内容</li><li>把 CSS 放到顶部</li><li>把 JS 放到底部</li><li>避免使用 CSS 表达式</li><li>将 CSS 和 JS 放到外部文件中</li><li>减少 DNS 查找次数</li><li>精简 CSS 和 JS</li><li>避免跳转</li><li>剔除重复的 JS 和 CSS</li><li>配置 ETags</li><li>使 AJAX 可缓存</li><li>尽早刷新输出缓冲</li><li>使用 GET 来完成 AJAX 请求</li><li>延迟加载</li><li>预加载</li><li>减少 DOM 元素个数</li><li>根据域名划分页面内容</li><li>尽量减少 iframe 的个数</li><li>避免 404</li><li>减少 Cookie 的大小</li><li>使用无 cookie 的域</li><li>减少 DOM 访问</li><li>开发智能事件处理程序</li><li>用 <code>&lt;link&gt;</code> 代替 <code>@import</code></li><li>避免使用滤镜</li><li>优化图像</li><li>优化 CSS Spirite</li><li>不要在 HTML 中缩放图像——须权衡</li><li>favicon.ico要小而且可缓存</li><li>保持单个内容小于25K</li><li>打包组件成复合文本</li></ol><p><a href="https://segmentfault.com/a/1190000015052545" target="_blank" rel="noopener noreferrer">https://segmentfault.com/a/1190000015052545</a></p>',4);a.render=function(e,t,a,o,p,S){return i(),l("div",null,[r])};export default a;export{t as __pageData};
