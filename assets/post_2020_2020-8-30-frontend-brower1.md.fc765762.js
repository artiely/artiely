import{o as n,c as t,f as e,a as s,x as a}from"./app.b304d650.js";const o='{"title":"前端面试题汇总-浏览器篇-1","description":"","frontmatter":{"title":"前端面试题汇总-浏览器篇-1","tag":["javaScript"],"cover":"https://gitee.com/artiely/Figure-bed/raw/master/image/20200831112934.png","base64":"2b4dd7","author":"artiely","date":"2020-8-30"},"headers":[{"level":2,"title":"1. 浏览器渲染机制","slug":"1-浏览器渲染机制"},{"level":2,"title":"2. 重绘","slug":"2-重绘"},{"level":2,"title":"3. 回流","slug":"3-回流"},{"level":2,"title":"浏览器与Node的事件循环有何区别?","slug":"浏览器与node的事件循环有何区别"},{"level":3,"title":"浏览器","slug":"浏览器"},{"level":3,"title":"Node","slug":"node"},{"level":3,"title":"一、线程与进程","slug":"一-线程与进程"},{"level":3,"title":"1.概念","slug":"1概念"},{"level":3,"title":"2.多进程与多线程","slug":"2多进程与多线程"},{"level":2,"title":"二、浏览器内核","slug":"二-浏览器内核"},{"level":3,"title":"1.GUI渲染线程","slug":"1gui渲染线程"},{"level":3,"title":"2.JS引擎线程","slug":"2js引擎线程"},{"level":3,"title":"3.定时器触发线程","slug":"3定时器触发线程"},{"level":3,"title":"4.事件触发线程","slug":"4事件触发线程"},{"level":3,"title":"5.异步http请求线程","slug":"5异步http请求线程"},{"level":2,"title":"三、浏览器中的 Event Loop","slug":"三-浏览器中的-event-loop"},{"level":3,"title":"1.Micro-Task 与 Macro-Task","slug":"1micro-task-与-macro-task"},{"level":3,"title":"2.Event Loop 过程解析","slug":"2event-loop-过程解析"},{"level":2,"title":"四、Node 中的 Event Loop","slug":"四-node-中的-event-loop"},{"level":3,"title":"1.Node简介","slug":"1node简介"},{"level":3,"title":"2.六个阶段","slug":"2六个阶段"},{"level":3,"title":"3.Micro-Task 与 Macro-Task","slug":"3micro-task-与-macro-task"},{"level":3,"title":"4.注意点","slug":"4注意点"},{"level":2,"title":"五、Node与浏览器的 Event Loop 差异","slug":"五-node与浏览器的-event-loop-差异"},{"level":2,"title":"六、总结","slug":"六-总结"}],"relativePath":"post/2020/2020-8-30-frontend-brower1.md","lastUpdated":1629110864092}',c={},l=e('<h1 id="前端面试题汇总-浏览器篇-1"><a class="header-anchor" href="#前端面试题汇总-浏览器篇-1" aria-hidden="true">#</a> 前端面试题汇总-浏览器篇-1</h1><h2 id="1-浏览器渲染机制"><a class="header-anchor" href="#1-浏览器渲染机制" aria-hidden="true">#</a> 1. 浏览器渲染机制</h2><ul><li>浏览器采用流式布局模型（<code>Flow Based Layout</code>）</li><li>浏览器会把<code>HTML</code>解析成<code>DOM</code>，把<code>CSS</code>解析成<code>CSSOM</code>，<code>DOM</code>和<code>CSSOM</code>合并就产生了渲染树（<code>Render Tree</code>）。</li><li>有了<code>RenderTree</code>，我们就知道了所有节点的样式，然后计算他们在页面上的大小和位置，最后把节点绘制到页面上。</li><li>由于浏览器使用流式布局，对<code>Render Tree</code>的计算通常只需要遍历一次就可以完成，<strong>但<code>table</code>及其内部元素除外，他们可能需要多次计算，通常要花3倍于同等元素的时间，这也是为什么要避免使用<code>table</code>布局的原因之一</strong>。</li></ul><h2 id="2-重绘"><a class="header-anchor" href="#2-重绘" aria-hidden="true">#</a> 2. 重绘</h2><p>由于节点的几何属性发生改变或者由于样式发生改变而不会影响布局的，称为重绘，例如<code>outline</code>, <code>visibility</code>, <code>color</code>、<code>background-color</code>等，重绘的代价，因为浏览器必须验证DOM树上其他节点元素的可见性。</p><h2 id="3-回流"><a class="header-anchor" href="#3-回流" aria-hidden="true">#</a> 3. 回流</h2><p>回流是布局或者几何属性需要改变就称为回流。回流是影响浏览器性能的关键因素，因为其变化涉及到部分页面（或是整个页面）的布局更新。一个元素的回流可能会导致了其所有子元素以及DOM中紧随其后的节点、祖先节点元素的随后的回流。</p>',7),i=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[s("span",{class:"token operator"},"<"),a("body"),s("span",{class:"token operator"},">"),a("\n"),s("span",{class:"token operator"},"<"),a("div "),s("span",{class:"token keyword"},"class"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},'"error"'),s("span",{class:"token operator"},">"),a("\n    "),s("span",{class:"token operator"},"<"),a("h4"),s("span",{class:"token operator"},">"),a("我的组件"),s("span",{class:"token operator"},"<"),s("span",{class:"token operator"},"/"),a("h4"),s("span",{class:"token operator"},">"),a("\n    "),s("span",{class:"token operator"},"<"),a("p"),s("span",{class:"token operator"},">"),s("span",{class:"token operator"},"<"),a("strong"),s("span",{class:"token operator"},">"),a("错误："),s("span",{class:"token operator"},"<"),s("span",{class:"token operator"},"/"),a("strong"),s("span",{class:"token operator"},">"),a("错误的描述…"),s("span",{class:"token operator"},"<"),s("span",{class:"token operator"},"/"),a("p"),s("span",{class:"token operator"},">"),a("\n    "),s("span",{class:"token operator"},"<"),a("h5"),s("span",{class:"token operator"},">"),a("错误纠正"),s("span",{class:"token operator"},"<"),s("span",{class:"token operator"},"/"),a("h5"),s("span",{class:"token operator"},">"),a("\n    "),s("span",{class:"token operator"},"<"),a("ol"),s("span",{class:"token operator"},">"),a("\n        "),s("span",{class:"token operator"},"<"),a("li"),s("span",{class:"token operator"},">"),a("第一步"),s("span",{class:"token operator"},"<"),s("span",{class:"token operator"},"/"),a("li"),s("span",{class:"token operator"},">"),a("\n        "),s("span",{class:"token operator"},"<"),a("li"),s("span",{class:"token operator"},">"),a("第二步"),s("span",{class:"token operator"},"<"),s("span",{class:"token operator"},"/"),a("li"),s("span",{class:"token operator"},">"),a("\n    "),s("span",{class:"token operator"},"<"),s("span",{class:"token operator"},"/"),a("ol"),s("span",{class:"token operator"},">"),a("\n"),s("span",{class:"token operator"},"<"),s("span",{class:"token operator"},"/"),a("div"),s("span",{class:"token operator"},">"),a("\n"),s("span",{class:"token operator"},"<"),s("span",{class:"token operator"},"/"),a("body"),s("span",{class:"token operator"},">"),a("\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558771211-34219"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":'<body>\n<div class="error">\n    <h4>我的组件</h4>\n    <p><strong>错误：</strong>错误的描述…</p>\n    <h5>错误纠正</h5>\n    <ol>\n        <li>第一步</li>\n        <li>第二步</li>\n    </ol>\n</div>\n</body>\n',"data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558771211-34219","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br"),s("span",{class:"line-number"},"11"),s("br")])],-1),p=e('<p>在上面的HTML片段中，对该段落(<code>标签)回流将会引发强烈的回流，因为它是一个子节点。这也导致了祖先的回流（`div.error`和`body` – 视浏览器而定）。此外，</code>和``也会有简单的回流，因为其在DOM中在回流元素之后。<strong>大部分的回流将导致页面的重新渲染。</strong></p><p><strong>回流必定会发生重绘，重绘不一定会引发回流。</strong></p><h4 id="4-浏览器优化"><a class="header-anchor" href="#4-浏览器优化" aria-hidden="true">#</a> 4. 浏览器优化</h4><p>现代浏览器大多都是通过队列机制来批量更新布局，浏览器会把修改操作放在队列中，至少一个浏览器刷新（即16.6ms）才会清空队列，但当你<strong>获取布局信息的时候，队列中可能有会影响这些属性或方法返回值的操作，即使没有，浏览器也会强制清空队列，触发回流与重绘来确保返回正确的值</strong>。</p><p>主要包括以下属性或方法：</p><ul><li><code>offsetTop</code>、<code>offsetLeft</code>、<code>offsetWidth</code>、<code>offsetHeight</code></li><li><code>scrollTop</code>、<code>scrollLeft</code>、<code>scrollWidth</code>、<code>scrollHeight</code></li><li><code>clientTop</code>、<code>clientLeft</code>、<code>clientWidth</code>、<code>clientHeight</code></li><li><code>width</code>、<code>height</code></li><li><code>getComputedStyle()</code></li><li><code>getBoundingClientRect()</code></li></ul><p>所以，我们应该避免频繁的使用上述的属性，他们都会强制渲染刷新队列。</p><h4 id="5-减少重绘与回流"><a class="header-anchor" href="#5-减少重绘与回流" aria-hidden="true">#</a> 5. 减少重绘与回流</h4>',8),r=s("ol",null,[s("li",null,[s("p",null,"CSS"),s("ul",null,[s("li",null,[s("p",null,[s("strong",null,[a("使用 "),s("code",null,"transform"),a(" 替代 "),s("code",null,"top")])])]),s("li",null,[s("p",null,[s("strong",null,[a("使用 "),s("code",null,"visibility"),a(" 替换 "),s("code",null,"display: none")]),a(" ，因为前者只会引起重绘，后者会引发回流（改变了布局")])]),s("li",null,[s("p",null,[s("strong",null,[a("避免使用"),s("code",null,"table"),a("布局")]),a("，可能很小的一个小改动会造成整个 "),s("code",null,"table"),a(" 的重新布局。")])]),s("li",null,[s("p",null,[s("strong",null,[a("尽可能在"),s("code",null,"DOM"),a("树的最末端改变"),s("code",null,"class")]),a("，回流是不可避免的，但可以减少其影响。尽可能在DOM树的最末端改变class，可以限制了回流的范围，使其影响尽可能少的节点。")])]),s("li",null,[s("p",null,[s("strong",null,"避免设置多层内联样式"),a("，CSS 选择符"),s("strong",null,"从右往左"),a("匹配查找，避免节点层级过多。")]),s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[s("span",{class:"token operator"},"<"),a("div"),s("span",{class:"token operator"},">"),a("\n  "),s("span",{class:"token operator"},"<"),a("a"),s("span",{class:"token operator"},">"),a(),s("span",{class:"token operator"},"<"),a("span"),s("span",{class:"token operator"},">"),s("span",{class:"token operator"},"<"),s("span",{class:"token operator"},"/"),a("span"),s("span",{class:"token operator"},">"),a(),s("span",{class:"token operator"},"<"),s("span",{class:"token operator"},"/"),a("a"),s("span",{class:"token operator"},">"),a("\n"),s("span",{class:"token operator"},"<"),s("span",{class:"token operator"},"/"),a("div"),s("span",{class:"token operator"},">"),a("\n"),s("span",{class:"token operator"},"<"),a("style"),s("span",{class:"token operator"},">"),a("\n  span "),s("span",{class:"token punctuation"},"{"),a("\n    color"),s("span",{class:"token operator"},":"),a(" red"),s("span",{class:"token punctuation"},";"),a("\n  "),s("span",{class:"token punctuation"},"}"),a("\n  div "),s("span",{class:"token operator"},">"),a(" a "),s("span",{class:"token operator"},">"),a(" span "),s("span",{class:"token punctuation"},"{"),a("\n    color"),s("span",{class:"token operator"},":"),a(" red"),s("span",{class:"token punctuation"},";"),a("\n  "),s("span",{class:"token punctuation"},"}"),a("\n"),s("span",{class:"token operator"},"<"),s("span",{class:"token operator"},"/"),a("style"),s("span",{class:"token operator"},">"),a("\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558771211-92461"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"<div>\n  <a> <span></span> </a>\n</div>\n<style>\n  span {\n    color: red;\n  }\n  div > a > span {\n    color: red;\n  }\n</style>\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558771211-92461","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br"),s("span",{class:"line-number"},"11"),s("br")])]),s("p",null,[a("对于第一种设置样式的方式来说，浏览器只需要找到页面中所有的 "),s("code",null,"span"),a(" 标签然后设置颜色，但是对于第二种设置样式的方式来说，浏览器首先需要找到所有的 "),s("code",null,"span"),a(" 标签，然后找到 "),s("code",null,"span"),a(" 标签上的 "),s("code",null,"a"),a(" 标签，最后再去找到 "),s("code",null,"div"),a(" 标签，然后给符合这种条件的 "),s("code",null,"span"),a(" 标签设置颜色，这样的递归过程就很复杂。所以我们应该尽可能的避免写"),s("strong",null,"过于具体"),a("的 CSS 选择器，然后对于 HTML 来说也尽量少的添加无意义标签，保证"),s("strong",null,"层级扁平"),a("。")])]),s("li",null,[s("p",null,[s("strong",null,[a("将动画效果应用到"),s("code",null,"position"),a("属性为"),s("code",null,"absolute"),a("或"),s("code",null,"fixed"),a("的元素上")]),a("，避免影响其他元素的布局，这样只是一个重绘，而不是回流，同时，控制动画速度可以选择 "),s("code",null,"requestAnimationFrame"),a("，详见"),s("a",{href:"https://github.com/LuNaHaiJiao/blog/issues/30",target:"_blank",rel:"noopener noreferrer"},"探讨 requestAnimationFrame"),a("。")])]),s("li",null,[s("p",null,[s("strong",null,[a("避免使用"),s("code",null,"CSS"),a("表达式")]),a("，可能会引发回流。")])]),s("li",null,[s("p",null,[s("strong",null,"将频繁重绘或者回流的节点设置为图层"),a("，图层能够阻止该节点的渲染行为影响别的节点，例如"),s("code",null,"will-change"),a("、"),s("code",null,"video"),a("、"),s("code",null,"iframe"),a("等标签，浏览器会自动将该节点变为图层。")])]),s("li",null,[s("p",null,[s("strong",null,"CSS3 硬件加速（GPU加速）"),a("，使用css3硬件加速，可以让"),s("code",null,"transform"),a("、"),s("code",null,"opacity"),a("、"),s("code",null,"filters"),a("这些动画不会引起回流重绘 。但是对于动画的其它属性，比如"),s("code",null,"background-color"),a("这些，还是会引起回流重绘的，不过它还是可以提升这些动画的性能。")])])])]),s("li",null,[s("p",null,"JavaScript"),s("ul",null,[s("li",null,[s("strong",null,"避免频繁操作样式"),a("，最好一次性重写"),s("code",null,"style"),a("属性，或者将样式列表定义为"),s("code",null,"class"),a("并一次性更改"),s("code",null,"class"),a("属性。")]),s("li",null,[s("strong",null,[a("避免频繁操作"),s("code",null,"DOM")]),a("，创建一个"),s("code",null,"documentFragment"),a("，在它上面应用所有"),s("code",null,"DOM操作"),a("，最后再把它添加到文档中。")]),s("li",null,[s("strong",null,"避免频繁读取会引发回流/重绘的属性"),a("，如果确实需要多次使用，就用一个变量缓存起来。")]),s("li",null,[s("strong",null,"对具有复杂动画的元素使用绝对定位"),a("，使它脱离文档流，否则会引起父元素及后续元素频繁回流。")])]),s("h2",{id:"浏览器与node的事件循环有何区别"},[s("a",{class:"header-anchor",href:"#浏览器与node的事件循环有何区别","aria-hidden":"true"},"#"),a(" 浏览器与Node的事件循环有何区别?")])])],-1),u=e('<p>(Event Loop)</p><h3 id="浏览器"><a class="header-anchor" href="#浏览器" aria-hidden="true">#</a> 浏览器</h3><p><strong>关于微任务和宏任务在浏览器的执行顺序是这样的：</strong></p><ul><li>执行一只task（宏任务）</li><li>执行完micro-task队列 （微任务）</li></ul><p>如此循环往复下去</p><blockquote><p>浏览器的task（宏任务）执行顺序在 <a href="https://html.spec.whatwg.org/multipage/webappapis.html#event-loops" target="_blank" rel="noopener noreferrer">html#event-loops</a> 里面有讲就不翻译了 常见的 task（宏任务） 比如：setTimeout、setInterval、script（整体代码）、 I/O 操作、UI 渲染等。 常见的 micro-task 比如: new Promise().then(回调)、MutationObserver(html5新特性) 等。</p></blockquote><h3 id="node"><a class="header-anchor" href="#node" aria-hidden="true">#</a> Node</h3><p>Node的事件循环是libuv实现的，引用一张官网的图：</p><p><img src="https://gitee.com/artiely/Figure-bed/raw/master/image/20200831103125.png" alt=""></p><p>大体的task（宏任务）执行顺序是这样的：</p><ul><li>timers定时器：本阶段执行已经安排的 setTimeout() 和 setInterval() 的回调函数。</li><li>pending callbacks待定回调：执行延迟到下一个循环迭代的 I/O 回调。</li><li>idle, prepare：仅系统内部使用。</li><li>poll 轮询：检索新的 I/O 事件;执行与 I/O 相关的回调（几乎所有情况下，除了关闭的回调函数，它们由计时器和 setImmediate() 排定的之外），其余情况 node 将在此处阻塞。</li><li>check 检测：setImmediate() 回调函数在这里执行。</li><li>close callbacks 关闭的回调函数：一些准备关闭的回调函数，如：socket.on(&#39;close&#39;, ...)。</li></ul><p><strong>微任务和宏任务在Node的执行顺序</strong></p><p>Node 10以前：</p><ul><li>执行完一个阶段的所有任务</li><li>执行完nextTick队列里面的内容</li><li>然后执行完微任务队列的内容</li></ul><p>Node 11以后： 和浏览器的行为统一了，都是每执行一个宏任务就执行完微任务队列。</p><h3 id="一-线程与进程"><a class="header-anchor" href="#一-线程与进程" aria-hidden="true">#</a> 一、线程与进程</h3><h3 id="1概念"><a class="header-anchor" href="#1概念" aria-hidden="true">#</a> 1.概念</h3><p>我们经常说JS 是单线程执行的，指的是一个进程里只有一个主线程，那到底什么是线程？什么是进程？</p><p>官方的说法是：<strong>进程是 CPU资源分配的最小单位；线程是 CPU调度的最小单位</strong>。这两句话并不好理解，我们先来看张图：</p><p><img src="https://gitee.com/artiely/Figure-bed/raw/master/image/20200831103150.png" alt=""></p><ul><li>进程好比图中的工厂，有单独的专属自己的工厂资源。</li><li>线程好比图中的工人，多个工人在一个工厂中协作工作，工厂与工人是 1:n的关系。也就是说<strong>一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线</strong>；</li><li>工厂的空间是工人们共享的，这象征<strong>一个进程的内存空间是共享的，每个线程都可用这些共享内存</strong>。</li><li>多个工厂之间独立存在。</li></ul><h3 id="2多进程与多线程"><a class="header-anchor" href="#2多进程与多线程" aria-hidden="true">#</a> 2.多进程与多线程</h3><ul><li>多进程：在同一个时间里，同一个计算机系统中如果允许两个或两个以上的进程处于运行状态。多进程带来的好处是明显的，比如你可以听歌的同时，打开编辑器敲代码，编辑器和听歌软件的进程之间丝毫不会相互干扰。</li><li>多线程：程序中包含多个执行流，即在一个程序中可以同时运行多个不同的线程来执行不同的任务，也就是说允许单个程序创建多个并行执行的线程来完成各自的任务。</li></ul><p>以Chrome浏览器中为例，当你打开一个 Tab 页时，其实就是创建了一个进程，一个进程中可以有多个线程（下文会详细介绍），比如渲染线程、JS 引擎线程、HTTP 请求线程等等。当你发起一个请求时，其实就是创建了一个线程，当请求结束后，该线程可能就会被销毁。</p><h2 id="二-浏览器内核"><a class="header-anchor" href="#二-浏览器内核" aria-hidden="true">#</a> 二、浏览器内核</h2><p>简单来说浏览器内核是通过取得页面内容、整理信息（应用CSS）、计算和组合最终输出可视化的图像结果，通常也被称为渲染引擎。</p><p>浏览器内核是多线程，在内核控制下各线程相互配合以保持同步，一个浏览器通常由以下常驻线程组成：</p><ul><li>GUI 渲染线程</li><li>JavaScript引擎线程</li><li>定时触发器线程</li><li>事件触发线程</li><li>异步http请求线程</li></ul><h3 id="1gui渲染线程"><a class="header-anchor" href="#1gui渲染线程" aria-hidden="true">#</a> 1.GUI渲染线程</h3><ul><li>主要负责页面的渲染，解析HTML、CSS，构建DOM树，布局和绘制等。</li><li>当界面需要重绘或者由于某种操作引发回流时，将执行该线程。</li><li>该线程与JS引擎线程互斥，当执行JS引擎线程时，GUI渲染会被挂起，当任务队列空闲时，主线程才会去执行GUI渲染。</li></ul><h3 id="2js引擎线程"><a class="header-anchor" href="#2js引擎线程" aria-hidden="true">#</a> 2.JS引擎线程</h3><ul><li>该线程当然是主要负责处理 JavaScript脚本，执行代码。</li><li>也是主要负责执行准备好待执行的事件，即定时器计数结束，或者异步请求成功并正确返回时，将依次进入任务队列，等待 JS引擎线程的执行。</li><li>当然，该线程与 GUI渲染线程互斥，当 JS引擎线程执行 JavaScript脚本时间过长，将导致页面渲染的阻塞。</li></ul><h3 id="3定时器触发线程"><a class="header-anchor" href="#3定时器触发线程" aria-hidden="true">#</a> 3.定时器触发线程</h3><ul><li>负责执行异步定时器一类的函数的线程，如： setTimeout，setInterval。</li><li>主线程依次执行代码时，遇到定时器，会将定时器交给该线程处理，当计数完毕后，事件触发线程会将计数完毕后的事件加入到任务队列的尾部，等待JS引擎线程执行。</li></ul><h3 id="4事件触发线程"><a class="header-anchor" href="#4事件触发线程" aria-hidden="true">#</a> 4.事件触发线程</h3><ul><li>主要负责将准备好的事件交给 JS引擎线程执行。</li></ul><p>比如 setTimeout定时器计数结束， ajax等异步请求成功并触发回调函数，或者用户触发点击事件时，该线程会将整装待发的事件依次加入到任务队列的队尾，等待 JS引擎线程的执行。</p><h3 id="5异步http请求线程"><a class="header-anchor" href="#5异步http请求线程" aria-hidden="true">#</a> 5.异步http请求线程</h3><ul><li>负责执行异步请求一类的函数的线程，如： Promise，axios，ajax等。</li><li>主线程依次执行代码时，遇到异步请求，会将函数交给该线程处理，当监听到状态码变更，如果有回调函数，事件触发线程会将回调函数加入到任务队列的尾部，等待JS引擎线程执行。</li></ul><h2 id="三-浏览器中的-event-loop"><a class="header-anchor" href="#三-浏览器中的-event-loop" aria-hidden="true">#</a> 三、浏览器中的 Event Loop</h2><h3 id="1micro-task-与-macro-task"><a class="header-anchor" href="#1micro-task-与-macro-task" aria-hidden="true">#</a> 1.Micro-Task 与 Macro-Task</h3><p>浏览器端事件循环中的异步队列有两种：macro（宏任务）队列和 micro（微任务）队列。</p><ul><li>常见的 macro-task 比如：setTimeout、setInterval、script（整体代码）、 I/O 操作、UI 渲染等。</li><li>常见的 micro-task 比如: new Promise().then(回调)、MutationObserver(html5新特性) 等。</li></ul><h3 id="2event-loop-过程解析"><a class="header-anchor" href="#2event-loop-过程解析" aria-hidden="true">#</a> 2.Event Loop 过程解析</h3><p>一个完整的 Event Loop 过程，可以概括为以下阶段：</p><p><img src="https://gitee.com/artiely/Figure-bed/raw/master/image/20200831103255.png" alt=""></p><ul><li>一开始执行栈空,我们可以把<strong>执行栈认为是一个存储函数调用的栈结构，遵循先进后出的原则</strong>。micro 队列空，macro 队列里有且只有一个 script 脚本（整体代码）。</li><li>全局上下文（script 标签）被推入执行栈，同步代码执行。在执行的过程中，会判断是同步任务还是异步任务，通过对一些接口的调用，可以产生新的 macro-task 与 micro-task，它们会分别被推入各自的任务队列里。同步代码执行完了，script 脚本会被移出 macro 队列，这个过程本质上是队列的 macro-task 的执行和出队的过程。</li><li>上一步我们出队的是一个 macro-task，这一步我们处理的是 micro-task。但需要注意的是：当 macro-task 出队时，任务是<strong>一个一个</strong>执行的；而 micro-task 出队时，任务是<strong>一队一队</strong>执行的。因此，我们处理 micro 队列这一步，会逐个执行队列中的任务并把它出队，直到队列被清空。</li><li><strong>执行渲染操作，更新界面</strong></li><li>检查是否存在 Web worker 任务，如果有，则对其进行处理</li><li>上述过程循环往复，直到两个队列都清空</li></ul><p>我们总结一下，每一次循环都是一个这样的过程：</p><p><img src="https://gitee.com/artiely/Figure-bed/raw/master/image/20200831103324.png" alt=""></p><p><strong>当某个宏任务执行完后,会查看是否有微任务队列。如果有，先执行微任务队列中的所有任务，如果没有，会读取宏任务队列中排在最前的任务，执行宏任务的过程中，遇到微任务，依次加入微任务队列。栈空后，再次读取微任务队列里的任务，依次类推。</strong></p><p>接下来我们看道例子来介绍上面流程：</p>',51),d=s("div",{class:"language-"},[s("pre",null,[s("code",null,"Promise.resolve().then(()=>{\n  console.log('Promise1')  \n  setTimeout(()=>{\n    console.log('setTimeout2')\n  },0)\n})\nsetTimeout(()=>{\n  console.log('setTimeout1')\n  Promise.resolve().then(()=>{\n    console.log('Promise2')    \n  })\n},0)\n"),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558771211-83530"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"Promise.resolve().then(()=>{\n  console.log('Promise1')  \n  setTimeout(()=>{\n    console.log('setTimeout2')\n  },0)\n})\nsetTimeout(()=>{\n  console.log('setTimeout1')\n  Promise.resolve().then(()=>{\n    console.log('Promise2')    \n  })\n},0)\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558771211-83530","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br"),s("span",{class:"line-number"},"11"),s("br"),s("span",{class:"line-number"},"12"),s("br")])],-1),m=e('<p>最后输出结果是Promise1，setTimeout1，Promise2，setTimeout2</p><ul><li>一开始执行栈的同步任务（这属于宏任务）执行完毕，会去查看是否有微任务队列，上题中存在(有且只有一个)，然后执行微任务队列中的所有任务输出Promise1，同时会生成一个宏任务 setTimeout2</li><li>然后去查看宏任务队列，宏任务 setTimeout1 在 setTimeout2 之前，先执行宏任务 setTimeout1，输出 setTimeout1</li><li>在执行宏任务setTimeout1时会生成微任务Promise2 ，放入微任务队列中，接着先去清空微任务队列中的所有任务，输出 Promise2</li><li>清空完微任务队列中的所有任务后，就又会去宏任务队列取一个，这回执行的是 setTimeout2</li></ul><h2 id="四-node-中的-event-loop"><a class="header-anchor" href="#四-node-中的-event-loop" aria-hidden="true">#</a> 四、Node 中的 Event Loop</h2><h3 id="1node简介"><a class="header-anchor" href="#1node简介" aria-hidden="true">#</a> 1.Node简介</h3><p>Node 中的 Event Loop 和浏览器中的是完全不相同的东西。Node.js采用V8作为js的解析引擎，而I/O处理方面使用了自己设计的libuv，libuv是一个基于事件驱动的跨平台抽象层，封装了不同操作系统一些底层特性，对外提供统一的API，事件循环机制也是它里面的实现（下文会详细介绍）。</p><p><img src="https://gitee.com/artiely/Figure-bed/raw/master/image/20200831103422.png" alt=""></p><p>Node.js的运行机制如下:</p><ul><li>V8引擎解析JavaScript脚本。</li><li>解析后的代码，调用Node API。</li><li>libuv库负责Node API的执行。它将不同的任务分配给不同的线程，形成一个Event Loop（事件循环），以异步的方式将任务的执行结果返回给V8引擎。</li><li>V8引擎再将结果返回给用户。</li></ul><h3 id="2六个阶段"><a class="header-anchor" href="#2六个阶段" aria-hidden="true">#</a> 2.六个阶段</h3><p>其中libuv引擎中的事件循环分为 6 个阶段，它们会按照顺序反复运行。每当进入某一个阶段的时候，都会从对应的回调队列中取出函数去执行。当队列为空或者执行的回调函数数量到达系统设定的阈值，就会进入下一阶段。</p><p><img src="https://gitee.com/artiely/Figure-bed/raw/master/image/20200831103517.png" alt=""></p><p>从上图中，大致看出node中的事件循环的顺序：</p><p>外部输入数据--&gt;轮询阶段(poll)--&gt;检查阶段(check)--&gt;关闭事件回调阶段(close callback)--&gt;定时器检测阶段(timer)--&gt;I/O事件回调阶段(I/O callbacks)--&gt;闲置阶段(idle, prepare)--&gt;轮询阶段（按照该顺序反复运行）...</p><ul><li>timers 阶段：这个阶段执行timer（setTimeout、setInterval）的回调</li><li>I/O callbacks 阶段：处理一些上一轮循环中的少数未执行的 I/O 回调</li><li>idle, prepare 阶段：仅node内部使用</li><li>poll 阶段：获取新的I/O事件, 适当的条件下node将阻塞在这里</li><li>check 阶段：执行 setImmediate() 的回调</li><li>close callbacks 阶段：执行 socket 的 close 事件回调</li></ul><p>注意：<strong>上面六个阶段都不包括 process.nextTick()</strong>(下文会介绍)</p><p>接下去我们详细介绍<code>timers</code>、<code>poll</code>、<code>check</code>这3个阶段，因为日常开发中的绝大部分异步任务都是在这3个阶段处理的。</p><h4 id="1-timer"><a class="header-anchor" href="#1-timer" aria-hidden="true">#</a> (1) timer</h4><p>timers 阶段会执行 setTimeout 和 setInterval 回调，并且是由 poll 阶段控制的。 同样，<strong>在 Node 中定时器指定的时间也不是准确时间，只能是尽快执行</strong>。</p><h4 id="2-poll"><a class="header-anchor" href="#2-poll" aria-hidden="true">#</a> (2) poll</h4><p>poll 是一个至关重要的阶段，这一阶段中，系统会做两件事情</p><p>1.回到 timer 阶段执行回调</p><p>2.执行 I/O 回调</p><p>并且在进入该阶段时如果没有设定了 timer 的话，会发生以下两件事情</p><ul><li>如果 poll 队列不为空，会遍历回调队列并同步执行，直到队列为空或者达到系统限制</li><li>如果 poll 队列为空时，会有两件事发生 <ul><li>如果有 setImmediate 回调需要执行，poll 阶段会停止并且进入到 check 阶段执行回调</li><li>如果没有 setImmediate 回调需要执行，会等待回调被加入到队列中并立即执行回调，这里同样会有个超时时间设置防止一直等待下去</li></ul></li></ul><p>当然设定了 timer 的话且 poll 队列为空，则会判断是否有 timer 超时，如果有的话会回到 timer 阶段执行回调。</p><h4 id="3-check阶段"><a class="header-anchor" href="#3-check阶段" aria-hidden="true">#</a> (3) check阶段</h4><p>setImmediate()的回调会被加入check队列中，从event loop的阶段图可以知道，check阶段的执行顺序在poll阶段之后。 我们先来看个例子:</p>',27),k=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[a("console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'start'"),s("span",{class:"token punctuation"},")"),a("\n"),s("span",{class:"token function"},"setTimeout"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token operator"},"=>"),a(),s("span",{class:"token punctuation"},"{"),a("\n  console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'timer1'"),s("span",{class:"token punctuation"},")"),a("\n  Promise"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"resolve"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"then"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"function"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a("\n    console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'promise1'"),s("span",{class:"token punctuation"},")"),a("\n  "),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),a("\n"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),a("\n"),s("span",{class:"token function"},"setTimeout"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token operator"},"=>"),a(),s("span",{class:"token punctuation"},"{"),a("\n  console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'timer2'"),s("span",{class:"token punctuation"},")"),a("\n  Promise"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"resolve"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"then"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"function"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a("\n    console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'promise2'"),s("span",{class:"token punctuation"},")"),a("\n  "),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),a("\n"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),a("\nPromise"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"resolve"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"then"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"function"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a("\n  console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'promise3'"),s("span",{class:"token punctuation"},")"),a("\n"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),a("\nconsole"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'end'"),s("span",{class:"token punctuation"},")"),a("\n"),s("span",{class:"token comment"},"//start=>end=>promise3=>timer1=>timer2=>promise1=>promise2"),a("\n\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558771211-20234"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"console.log('start')\nsetTimeout(() => {\n  console.log('timer1')\n  Promise.resolve().then(function() {\n    console.log('promise1')\n  })\n}, 0)\nsetTimeout(() => {\n  console.log('timer2')\n  Promise.resolve().then(function() {\n    console.log('promise2')\n  })\n}, 0)\nPromise.resolve().then(function() {\n  console.log('promise3')\n})\nconsole.log('end')\n//start=>end=>promise3=>timer1=>timer2=>promise1=>promise2\n\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558771211-20234","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br"),s("span",{class:"line-number"},"11"),s("br"),s("span",{class:"line-number"},"12"),s("br"),s("span",{class:"line-number"},"13"),s("br"),s("span",{class:"line-number"},"14"),s("br"),s("span",{class:"line-number"},"15"),s("br"),s("span",{class:"line-number"},"16"),s("br"),s("span",{class:"line-number"},"17"),s("br"),s("span",{class:"line-number"},"18"),s("br"),s("span",{class:"line-number"},"19"),s("br")])],-1),h=e('<ul><li>一开始执行栈的同步任务（这属于宏任务）执行完毕后（依次打印出start end，并将2个timer依次放入timer队列）,会先去执行微任务（<strong>这点跟浏览器端的一样</strong>），所以打印出promise3</li><li>然后进入timers阶段，执行timer1的回调函数，打印timer1，并将promise.then回调放入microtask队列，同样的步骤执行timer2，打印timer2；这点跟浏览器端相差比较大，<strong>timers阶段有几个setTimeout/setInterval都会依次执行</strong>，并不像浏览器端，每执行一个宏任务后就去执行一个微任务（关于Node与浏览器的 Event Loop 差异，下文还会详细介绍）。</li></ul><h3 id="3micro-task-与-macro-task"><a class="header-anchor" href="#3micro-task-与-macro-task" aria-hidden="true">#</a> 3.Micro-Task 与 Macro-Task</h3><p>Node端事件循环中的异步队列也是这两种：macro（宏任务）队列和 micro（微任务）队列。</p><ul><li>常见的 macro-task 比如：setTimeout、setInterval、 setImmediate、script（整体代码）、 I/O 操作等。</li><li>常见的 micro-task 比如: process.nextTick、new Promise().then(回调)等。</li></ul><h3 id="4注意点"><a class="header-anchor" href="#4注意点" aria-hidden="true">#</a> 4.注意点</h3><h4 id="1-settimeout-和-setimmediate"><a class="header-anchor" href="#1-settimeout-和-setimmediate" aria-hidden="true">#</a> (1) setTimeout 和 setImmediate</h4><p>二者非常相似，区别主要在于调用时机不同。</p><ul><li>setImmediate 设计在poll阶段完成时执行，即check阶段；</li><li>setTimeout 设计在poll阶段为空闲时，且设定时间到达后执行，但它在timer阶段执行</li></ul>',8),b=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[s("span",{class:"token function"},"setTimeout"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"function"),a(),s("span",{class:"token function"},"timeout"),a(),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a("\n  console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'timeout'"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a("\n"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},","),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a("\n"),s("span",{class:"token function"},"setImmediate"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"function"),a(),s("span",{class:"token function"},"immediate"),a(),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a("\n  console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'immediate'"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a("\n"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a("\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558771212-1487"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"setTimeout(function timeout () {\n  console.log('timeout');\n},0);\nsetImmediate(function immediate () {\n  console.log('immediate');\n});\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558771212-1487","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br")])],-1),g=s("ul",null,[s("li",null,"对于以上代码来说，setTimeout 可能执行在前，也可能执行在后。"),s("li",null,"首先 setTimeout(fn, 0) === setTimeout(fn, 1)，这是由源码决定的 进入事件循环也是需要成本的，如果在准备时候花费了大于 1ms 的时间，那么在 timer 阶段就会直接执行 setTimeout 回调"),s("li",null,"如果准备时间花费小于 1ms，那么就是 setImmediate 回调先执行了")],-1),y=s("p",null,"但当二者在异步i/o callback内部调用时，总是先执行setImmediate，再执行setTimeout",-1),f=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"const"),a(" fs "),s("span",{class:"token operator"},"="),a(),s("span",{class:"token function"},"require"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'fs'"),s("span",{class:"token punctuation"},")"),a("\nfs"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"readFile"),s("span",{class:"token punctuation"},"("),a("__filename"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token operator"},"=>"),a(),s("span",{class:"token punctuation"},"{"),a("\n    "),s("span",{class:"token function"},"setTimeout"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token operator"},"=>"),a(),s("span",{class:"token punctuation"},"{"),a("\n        console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'timeout'"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a("\n    "),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),a("\n    "),s("span",{class:"token function"},"setImmediate"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token operator"},"=>"),a(),s("span",{class:"token punctuation"},"{"),a("\n        console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'immediate'"),s("span",{class:"token punctuation"},")"),a("\n    "),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),a("\n"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),a("\n"),s("span",{class:"token comment"},"// immediate"),a("\n"),s("span",{class:"token comment"},"// timeout"),a("\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558771212-84148"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"const fs = require('fs')\nfs.readFile(__filename, () => {\n    setTimeout(() => {\n        console.log('timeout');\n    }, 0)\n    setImmediate(() => {\n        console.log('immediate')\n    })\n})\n// immediate\n// timeout\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558771212-84148","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br"),s("span",{class:"line-number"},"11"),s("br")])],-1),v=s("p",null,"在上述代码中，setImmediate 永远先执行。因为两个代码写在 IO 回调中，IO 回调是在 poll 阶段执行，当回调执行完毕后队列为空，发现存在 setImmediate 回调，所以就直接跳转到 check 阶段去执行回调了。",-1),T=s("h4",{id:"2-processnexttick"},[s("a",{class:"header-anchor",href:"#2-processnexttick","aria-hidden":"true"},"#"),a(" (2) process.nextTick")],-1),C=s("p",null,"这个函数其实是独立于 Event Loop 之外的，它有一个自己的队列，当每个阶段完成后，如果存在 nextTick 队列，就会清空队列中的所有回调函数，并且优先于其他 microtask 执行。",-1),I=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[s("span",{class:"token function"},"setTimeout"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token operator"},"=>"),a(),s("span",{class:"token punctuation"},"{"),a("\n console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'timer1'"),s("span",{class:"token punctuation"},")"),a("\n Promise"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"resolve"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"then"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"function"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a("\n   console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'promise1'"),s("span",{class:"token punctuation"},")"),a("\n "),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),a("\n"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),a("\nprocess"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"nextTick"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token operator"},"=>"),a(),s("span",{class:"token punctuation"},"{"),a("\n console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'nextTick'"),s("span",{class:"token punctuation"},")"),a("\n process"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"nextTick"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token operator"},"=>"),a(),s("span",{class:"token punctuation"},"{"),a("\n   console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'nextTick'"),s("span",{class:"token punctuation"},")"),a("\n   process"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"nextTick"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token operator"},"=>"),a(),s("span",{class:"token punctuation"},"{"),a("\n     console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'nextTick'"),s("span",{class:"token punctuation"},")"),a("\n     process"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"nextTick"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token operator"},"=>"),a(),s("span",{class:"token punctuation"},"{"),a("\n       console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'nextTick'"),s("span",{class:"token punctuation"},")"),a("\n     "),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),a("\n   "),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),a("\n "),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),a("\n"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),a("\n"),s("span",{class:"token comment"},"// nextTick=>nextTick=>nextTick=>nextTick=>timer1=>promise1"),a("\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558771212-18774"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"setTimeout(() => {\n console.log('timer1')\n Promise.resolve().then(function() {\n   console.log('promise1')\n })\n}, 0)\nprocess.nextTick(() => {\n console.log('nextTick')\n process.nextTick(() => {\n   console.log('nextTick')\n   process.nextTick(() => {\n     console.log('nextTick')\n     process.nextTick(() => {\n       console.log('nextTick')\n     })\n   })\n })\n})\n// nextTick=>nextTick=>nextTick=>nextTick=>timer1=>promise1\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558771212-18774","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br"),s("span",{class:"line-number"},"11"),s("br"),s("span",{class:"line-number"},"12"),s("br"),s("span",{class:"line-number"},"13"),s("br"),s("span",{class:"line-number"},"14"),s("br"),s("span",{class:"line-number"},"15"),s("br"),s("span",{class:"line-number"},"16"),s("br"),s("span",{class:"line-number"},"17"),s("br"),s("span",{class:"line-number"},"18"),s("br"),s("span",{class:"line-number"},"19"),s("br")])],-1),_=s("h2",{id:"五-node与浏览器的-event-loop-差异"},[s("a",{class:"header-anchor",href:"#五-node与浏览器的-event-loop-差异","aria-hidden":"true"},"#"),a(" 五、Node与浏览器的 Event Loop 差异")],-1),x=s("p",null,[s("strong",null,"浏览器环境下，microtask的任务队列是每个macrotask执行完之后执行。而在Node.js中，microtask会在事件循环的各个阶段之间执行，也就是一个阶段执行完毕，就会去执行microtask队列的任务"),a("。")],-1),P=s("p",null,[s("img",{src:"https://gitee.com/artiely/Figure-bed/raw/master/image/20200831103717.png",alt:""})],-1),S=s("p",null,"接下我们通过一个例子来说明两者区别：",-1),w=s("div",{class:"language-js line-numbers-mode"},[s("pre",null,[s("code",null,[s("span",{class:"token function"},"setTimeout"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},"=>"),s("span",{class:"token punctuation"},"{"),a("\n    console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'timer1'"),s("span",{class:"token punctuation"},")"),a("\n    Promise"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"resolve"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"then"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"function"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a("\n        console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'promise1'"),s("span",{class:"token punctuation"},")"),a("\n    "),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),a("\n"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),a("\n"),s("span",{class:"token function"},"setTimeout"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},"=>"),s("span",{class:"token punctuation"},"{"),a("\n    console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'timer2'"),s("span",{class:"token punctuation"},")"),a("\n    Promise"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"resolve"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"then"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"function"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a("\n        console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'promise2'"),s("span",{class:"token punctuation"},")"),a("\n    "),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),a("\n"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),a("\n\n")]),s("div",{class:"m-mdic-copy-wrapper"},[s("div",{class:"u-mdic-copy-notify",id:"j-notify-1629558771212-78706"},"复制成功"),s("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"setTimeout(()=>{\n    console.log('timer1')\n    Promise.resolve().then(function() {\n        console.log('promise1')\n    })\n}, 0)\nsetTimeout(()=>{\n    console.log('timer2')\n    Promise.resolve().then(function() {\n        console.log('promise2')\n    })\n}, 0)\n\n","data-mdic-attach-content":"copyright | [artiely]","data-mdic-notify-id":"j-notify-1629558771212-78706","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"复制")])]),s("div",{class:"line-numbers-wrapper"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br"),s("span",{class:"line-number"},"11"),s("br"),s("span",{class:"line-number"},"12"),s("br"),s("span",{class:"line-number"},"13"),s("br")])],-1),N=e('<p>浏览器端运行结果：<code>timer1=&gt;promise1=&gt;timer2=&gt;promise2</code></p><p>浏览器端的处理过程如下：</p><p><img src="https://gitee.com/artiely/Figure-bed/raw/master/image/16841d6392e8f537.gif" alt=""></p><p>Node端运行结果分两种情况：</p><ul><li>如果是node11版本一旦执行一个阶段里的一个宏任务(setTimeout,setInterval和setImmediate)就立刻执行微任务队列，这就跟浏览器端运行一致，最后的结果为<code>timer1=&gt;promise1=&gt;timer2=&gt;promise2</code></li><li>如果是node10及其之前版本：要看第一个定时器执行完，第二个定时器是否在完成队列中。 <ul><li>如果是第二个定时器还未在完成队列中，最后的结果为<code>timer1=&gt;promise1=&gt;timer2=&gt;promise2</code></li><li>如果是第二个定时器已经在完成队列中，则最后的结果为<code>timer1=&gt;timer2=&gt;promise1=&gt;promise2</code>(下文过程解释基于这种情况下)</li></ul></li></ul><p>1.全局脚本（main()）执行，将2个timer依次放入timer队列，main()执行完毕，调用栈空闲，任务队列开始执行；</p><p>2.首先进入timers阶段，执行timer1的回调函数，打印timer1，并将promise1.then回调放入microtask队列，同样的步骤执行timer2，打印timer2；</p><p>3.至此，timer阶段执行结束，event loop进入下一个阶段之前，执行microtask队列的所有任务，依次打印promise1、promise2</p><p>Node端的处理过程如下：</p><p><img src="https://gitee.com/artiely/Figure-bed/raw/master/image/16841d5f85468047.gif" alt=""></p><h2 id="六-总结"><a class="header-anchor" href="#六-总结" aria-hidden="true">#</a> 六、总结</h2><p>浏览器和Node 环境下，microtask 任务队列的执行时机不同</p><ul><li>Node端，microtask 在事件循环的各个阶段之间执行</li><li>浏览器端，microtask 在事件循环的 macrotask 执行完之后执行</li></ul>',13);c.render=function(e,s,a,o,c,j){return n(),t("div",null,[l,i,p,r,u,d,m,k,h,b,g,y,f,v,T,C,I,_,x,P,S,w,N])};export default c;export{o as __pageData};
